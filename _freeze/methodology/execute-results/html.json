{
  "hash": "65b24b3ba933a9581ab16c2f9649f42f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preview\"\ndate: \"21st Feb, 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute: \n  eval: false #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n\n\n# Overview\n\nIn this section, we will acquire the data sets from various government open-sources data repository and websites. Thereafter, we will install the necessary R packages and import the data sets. In each data set, we will delve into the necessary checks, issues faced and steps into resolving the issue. Thereafter, exploratory data analysis is done on a micro and macro level.\n\n# Data Acquisition\n\nIn this research, 3 main spectrum of data will be required for this research, namely the Population Data, Master Plan 2019 Subzone boundary and Care Centres. These datasets are gathered from multiple open-source websites which includes Singapore Department of Statistics, Data.gov, and Agency of Integrated Care.\n\n![Figure x: Data Overview](/metho_images/data_overview.png){fig-align=\"center\"}\n\n### Singapore Master Plan 2019 Subzone Boundary\n\nThe Singapore Master Plan 2019 Planning Subzone Boundary is a ESRI shapefile that is obtained from Data.gov.sg.\n\n### Population Data\n\nThe Singapore Resident by Planning Area/Subzone, Single Year of Age and Sex, June 2024 is selected for this\n\nAs the verison January 2025 will be not be ready in due time for this research project, thus, the version of June 2024 is used.\n\n### WebScraping of Care Centres\n\nDue to the lack of a centralised data of all care centres, web scarping is warranted in obtaining the information of the care centres. The geographical locations of the Care Centres alongside the centre names such as Active Ageing Centre, Day Care, Community Rehabilitation Centre, Centre-based Nursing were extracted using a web scraping tool, Web Scraper, available in Chrome web store as Seen in Figure x. As there is no centralised file that consist of the centre names and their locations, the location of each centre has to be manually extracted from the [Care Services](https://www.aic.sg/care-services/) webpage of the Agency of Integrated Care as seen in Figure x.\n\n#### Step 0: Download Web Scraper from Chrome web store\n\nWeb Scraper is used as it is free, works reasonably well and available in both Chrome and Firefox web store. In the below steps, Chrome will be the default web browser used.\n\n![*Figure x: Web Scraper*](/metho_images/step0.png)\n\n#### Step 1: Navigate to Developer Tools in Chrome Web Browser\n\nAfter downloading the extension from Chrome Web Store, press onto the menu bar at the right of the browser and locate Developer Tools while onto the website you would like to scrape information from.\n\n![*Figure x: Web Scraper*](/metho_images/step1.png)\n\n#### Step 2: Interface for Webscraper\n\nAfter clicking onto Developer Tools, click onto the Web Scraper in the menu bar (in black). Following which the below interface will appear.\n\n[![](/metho_images/step2.png){width=\"499\"}](Figure%20x:%20Locate%20Developer%20Tools)\n\n#### Step 3: Create New Sitemap\n\nClick onto \"create new sitemap\", thereafter \"Create Sitemap\". Sitemap Name will be the overarching term used for these information; in this instance, it will be AAC. The Start URL will be the HTML link that you would like the information to be scraped from.\n\n![Figure x:](/metho_images/step3.png){fig-align=\"center\"}\n\n#### Step 4: Add New Selector\n\nAfter creating a new sitemap, the following interface will appear. Click onto the \"Add new selector\" to select the information to scrape.\n\n![Figure x:](/metho_images/step4.png){fig-align=\"center\"}\n\n#### Step 5: Selecting Whole Box\n\nFirstly, the id will be the column name. For Type, select Element Attribute from the drop down selection. Thereafter, press on Select under Selector and select two boxes of each centre as seen in the figure below (the remaining boxes will be highlighted through its intelligent function) and press onto Done Selecting in the green box.\n\n![Figure x:](/metho_images/step5.png){fig-align=\"center\"}\n\n#### Step 6: Sitemap Interface\n\nAfter adding a new selector, the sitemap page will appear the selector that you've inputted.\n\n![Figure x: Step 6 - Create New Sitemap](/metho_images/step6.png){fig-align=\"center\"}\n\n#### Step 7: Selecting Name of Care Centre\n\nFirstly, the id will be name (with reference to the name of care centre), serving as the column name. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 names of the care centres (The remaining care centres will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple names and root parent selector will be root and press onto Save Selector.\n\n![Figure x: Step 7 - Selecting Name of Care Centre](/metho_images/step7.png){fig-align=\"center\"}\n\n#### Step 8: Create New Sitemap\n\nA popup window will be prompted and Group selectors was selected.\n\n![Figure x: Step 8 - Create New Sitemap](/metho_images/step8.png){fig-align=\"center\"}\n\n#### Step 9: Selecting Address of Care Centre\n\nSimilar to Step 7, the id will be address. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 addresses of the care centres (Remaining addresses will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple addresses and parent selector will be wrapper_for_main_name (as we grouped selectors in step 8) and press onto Save Selector.\n\n![Figure x: Step 9 - Selecting Address of Care Centre](/metho_images/step9.png){fig-align=\"center\"}\n\n#### Step 10: Data Preview\n\nPrior to data scraping, the data is previewed in ensuring each name of the care centre is correctly tagged to the address using the main website to verify.\n\n![Figure x: Step 10 - Data Preview](/metho_images/step10.png){fig-align=\"center\"}\n\n#### Step 11: Commence Scraping\n\nHead over to sitemap aac and click onto Scrape. A new browser will appear indicating that it is in process of scraping. It will be closed automatically once the process has ended.\n\n![Figure x: Step 11 - Commence Scraping](/metho_images/step11.png){fig-align=\"center\"}\n\n#### Step 11: Export Data\n\nExport data is selected upon clicking sitemap aac. 2 file options are offered: csv and xlsx. The former was chosen as CSV files are simple and portable which doesn't complicate data processing. Thereafter the data will be downloaded.\n\n![Figure x:](/metho_images/step12.png){fig-align=\"center\"}\n\n#### Step 11: View CSV File\n\nIn ensuring the web scraping successful and accurate, the csv. file is opened and viewed.\n\n![Figure x: Step 11 - View CSV File](/metho_images/step13.png){fig-align=\"center\"}\n\nThe above steps were repeated for each care centre. All of the Care Centre data was extracted on 7th February 2025.\n\n## Installing Packages\n\n::: panel-tabset\nThe following packages are required for this section:\n\n| Package | Description |\n|-------------------------------------|-----------------------------------|\n| [**tidyverse**](https://www.tidyverse.org/) | For non-spatial data wrangling that includes dplyr, tibble, ggplot2, readr, tidyr, stringr, forcats, lubridate and purr |\n| [**sf**](https://r-spatial.github.io/sf/) | For importing, managing, and handling geospatial data |\n| [**jsonlite**](https://cran.r-project.org/web/packages/jsonlite/index.html) | For interacting with a web API |\n| [**rvest**](https://cran.r-project.org/web/packages/rvest/index.html) | A wrapper around xml2 and httr packages |\n| [**sfdep**](https://sfdep.josiahparry.com/) | Used to compute spatial weights, global and local spatial autocorrelation statistics |\n| [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) | for creating elegent and cartographic quality thematic maps |\n| [**knitr**](https://cran.r-project.org/web/packages/knitr/index.html) | For dynamic report generation |\n| [**patchwork**](https://patchwork.data-imaginist.com/) | For plot manipulation |\n| [**leaflet**](https://rstudio.github.io/leaflet/) | For interactive maps |\n| [**scales**](https://scales.r-lib.org/) | For scaling graphs |\n| [**lubridate**](https://lubridate.tidyverse.org/) | For date-time manipulation |\n| [**tmap**](https://r-graph-gallery.com/package/tmap.html) | For creating interactive maps |\n| [**DT**](https://rstudio.github.io/DT/) | provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables. |\n\nThe code chunk below, using `p_load` function of the [**pacman**](https://cran.r-project.org/web/packages/pacman/pacman.pdf) package, ensures that packages required are installed and loaded in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf,\n               jsonlite, rvest, knitr, patchwork,\n               leaflet, scales, lubridate, tmap, DT)\n```\n:::\n\n\n:::\n\n\n## Singapore's Master Plan 2019 Subzone Boundary (MPSZ)\n\nUsing `st_read`, the ESRI shapefile was imported and it contains 323 data entries and 15 fields. Each of the data entry consists of a multi-polygon shape, with geospatial coordinates with a geographic coordinate system (GCS) of WGS84. The features of GCS include using a 3D spherical model of earth with coordinates of longitude, latitude and altitude whereas PCS uses a 2D plane model with linear measurements (i..e metres).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/subzone/\",\n               layer = \"MP14_SUBZONE_NO_SEA_PL\")\nhead(mpsz, n=5)\n```\n:::\n\n\n\n### Transforming CRS\n\nAs the research's focus is exploring the accessibility of care centres in Singapore, PCS would be appropriate in this context as it measures the distance between the elderly' residence and the care centre. Thus, in ensuring accurate measurement, the function \\`st_transform\\` with a crs of 3414 was used (Kam, 2022) in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Sampling Grid\n\nIn measuring spatial accessibility, hexagonal grid of the sampling fields is used to standardise the means of measurement as referencing to the output below, we noticed that the sampling fields in `mpsz` are not standardised. The centre of each hexagon is an Origin, additionally, acting as a starting point in ascertaining the shortest distance to the care centres. Oher sampling grids employed in similar research such as square grids, however, in the context of this research, it is more suitable as the hexagonal tshape ensures that the distance from the centre to the edges is more equal than the squares (Burdziej, 2018; Kam, 2022).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n:::\n\n\n\nIn the HealthierSG White Paper 2022, the Ministry of Health has indicated its intention to \"expand the network \\[\"care centres\"\\] to 220 by 2025\". Furthermore, through the Ministry's estimation, 8 in 10 seniors will have a care centre in the vicinity of their homes (Ministry of Health, 2022). Hence, we will assume that the maximum distance to the care centres are 100 metres. Hence, in the code chunk below, `st_make_grid` from `sf` package constructed hexagonal grids encompassing the Singapore Master Plan 2019 Planning Subzone Boundary using `cellsize` that defines the radius of 100 metres and `square` to be false to generate a hexagonal grid.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_grid <- st_make_grid(mpsz,\n                         cellsize = 100,\n                         what = \"polygon\",\n                         square = FALSE) %>%\n  st_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_grid$hex_id <- sprintf(\"H%04d\", seq_len(nrow(hex_grid))) %>% as.factor()\nhead(hex_grid)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_grid <- hex_grid %>%\n  mutate(hex_id = row_number())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_centroids <- st_centroid(hex_grid)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(hex_grid), col = \"lightblue\")\nplot(st_geometry(hex_centroids), pch = 20, col = \"red\", add = TRUE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n?explain this code\n\n\n\n## Road Network\n\nImporting road network\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroadnetwork = st_read(\"data/roadnetwork/RoadNetwork.kml\") %>%\n  st_transform(crs=3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz,\n    fill = roadnetwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Care Centre\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- read_csv(\"data/carecentre/activeageingcentre.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncounselling <- read_csv(\"data/carecentre/counselling.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndaycare <- read_csv(\"data/carecentre/daycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndementia <- read_csv(\"data/carecentre/dementiadaycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhospice <- read_csv(\"data/carecentre/dayhospice.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmaintenance <- read_csv(\"data/carecentre/maintenancedaycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnhrespite <- read_csv(\"data/carecentre/nhrespite.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnursing <- read_csv(\"data/carecentre/centrebasednursing.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrehab <- read_csv(\"data/carecentre/communityrehabcentre.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Cursory View\n\nUsing the glimpse() function, we are able to see that various rows in each data set while sharing the same number of columns. Columns \"web-scraper-order\" and \"web-scraper-start-url\" are redundant, thus, will be removed. Additionally, the address includes the postal code and it will seperated from the main street name and block number to facilitate the geospatial mapping thereafter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(aac)\n```\n:::\n\n\n\n### Deleting Unwanted Codes\n\nThe following R code is used to remove the columns \"web-scraper-order\" and \"web-scraper-start-url\" from multiple datasets: The select() function from the dplyr package is used to select or remove columns from a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- aac %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ncounselling <- counselling %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ndaycare <- daycare %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ndementia <- dementia %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nhospice <- hospice %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nmaintenance <- maintenance %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nnhrespite <- nhrespite %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nnursing <- nursing %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nrehab <- rehab %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\n```\n:::\n\n\n\nAfter removing the two columns, each data set has two columns, namely name and address only.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(aac)\n```\n:::\n\n\n\n### Checking for Missing Values\n\nTo check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.\n\nThe is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for missing or null values in 'name' and 'address' columns\naac_missing <- aac %>% summarise(across(c(name, address), ~sum(is.na(.))))\ncounselling_missing <- counselling %>% summarise(across(c(name, address), ~sum(is.na(.))))\ndaycare_missing <- daycare %>% summarise(across(c(name, address), ~sum(is.na(.))))\ndementia_missing <- dementia %>% summarise(across(c(name, address), ~sum(is.na(.))))\nhospice_missing <- hospice %>% summarise(across(c(name, address), ~sum(is.na(.))))\nmaintenance_missing <- maintenance %>% summarise(across(c(name, address), ~sum(is.na(.))))\nnhrespite_missing <- nhrespite %>% summarise(across(c(name, address), ~sum(is.na(.))))\nnursing_missing <- nursing %>% summarise(across(c(name, address), ~sum(is.na(.))))\nrehab_missing <- rehab %>% summarise(across(c(name, address), ~sum(is.na(.))))\n```\n:::\n\n\n\n### Duplicate Check\n\nThe code provided checks for duplicate rows in each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \\> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \\> 1) keeps only the rows that appear more than once (i.e., duplicates).\n\nFor each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.\n\nThus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates in 'aac'\naac_duplicate <- aac %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'counselling'\ncounselling_duplicate <- counselling %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'daycare'\ndaycare_duplicate <- daycare %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'dementia'\ndementia_duplicate <- dementia %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'hospice'\nhospice_duplicate <- hospice %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'maintenance'\nmaintenance_duplicate <- maintenance %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'nhrespite'\nnhrespite_duplicate <- nhrespite %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'nursing'\nnursing_duplicate <- nursing %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'rehab'\nrehab_duplicate <- rehab %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n```\n:::\n\n\n\n## Data Manipulation (CC)\n\n### Seperating postal code from address\n\nThe code uses the mutate() function to extract the postal code (last 6 digits) from the address column of the individual dataset and store it in a new column called postal_code. The postal code is then removed from the address column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Active Ageing Centre\naac <-mutate(aac,\n    postal_code = str_extract(address, \"[0-9]{6}$\"),  # Extract postal code\n    address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")  # Remove postal code from address\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counselling\ncounselling <- mutate(counselling,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daycare\ndaycare <- mutate(daycare,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dementia\ndementia <- mutate(dementia,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Day Hospice\nhospice <- mutate(hospice,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Maintenance Daycare\nmaintenance <- mutate(maintenance,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# NH Respite\nnhrespite <- mutate(nhrespite,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Centre Based Nursing\nnursing <- mutate(nursing,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Community Rehab Centre\nrehab <- mutate(rehab,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for missing or null values in 'name' and 'address' columns\naac_missing <- aac %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ncounselling_missing <- counselling %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ndaycare_missing <- daycare %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ndementia_missing <- dementia %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nhospice_missing <- hospice %>% summarise(across(c(name, address, postal_code),~sum(is.na(.))))\nmaintenance_missing <- maintenance %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nnhrespite_missing <- nhrespite %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nnursing_missing <- nursing %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nrehab_missing <- rehab %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\n```\n:::\n\n\n\n### Labelling each dataset appropriately\n\nThe below code chunk adds a column and naming it as \"label\" in relation to the name of the dataset hence we are able to identify the type of services provided by the care centres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- aac %>%\n  mutate(label = \"aac\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncounselling <- counselling %>%\n  mutate(label = \"counselling\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndaycare <- daycare %>%\n  mutate(label = \"daycare\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndementia <- dementia %>%\n  mutate(label = \"dementia\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhospice <- hospice %>%\n  mutate(label = \"hospice\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmaintenance <- maintenance %>%\n  mutate(label = \"maintenance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnhrespite <- nhrespite %>%\n  mutate(label = \"nhrespite\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnursing <- nursing %>%\n  mutate(label = \"nursing\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrehab <- rehab %>%\n  mutate(label = \"rehab\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Append all Care Centres into one dataset\n\nThe code combines multiple datasets (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) into a single dataset named c_data using the bind_rows() function. This function appends the rows of each dataset, stacking them vertically, to create one consolidated dataset. The resulting c_data will contain all the rows from the individual datasets, assuming they have the same column structure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_data <- bind_rows(\n  aac, \n  counselling,\n  daycare,\n  dementia,\n  hospice,\n  maintenance,\n  nhrespite,\n  nursing,\n  rehab,\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Transforming Categorical Data to Binary Indicator\n\nThis code transforms the dataset `cc_data` from a long format to a wide format by pivoting on the categorical values in the `label` column, effectively converting them into binary indicator columns. The process begins by removing the `address` column using `select(-address)` to exclude it from the transformation. Next, a new column called `present` is created using `mutate(present = 1)`, where every row is assigned a value of 1 to indicate the presence of a label. The key reshaping operation is performed using `pivot_wider()`, which spreads the unique values from the `label` column into separate columns. The `names_from = label` argument specifies that the new column names should be derived from the distinct categories in `label`, while `values_from = present` fills these new columns with the corresponding 1s from the `present` column. Any missing combinations (where a particular label does not appear for a given record) are automatically filled with 0s due to the `values_fill = list(0)` argument. The final output, stored in `pivoted_cc_data`, is a wider dataframe where each original row now has binary flags (1 or 0) indicating the presence or absence of each label category, making it suitable for analyses that require a one-hot encoded or dummy variable representation of categorical data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_cc_data <- cc_data %>%\n  select(-address) %>%\n\n  mutate(present = 1) %>%  # Create a column to indicate presence (1)\n\n  pivot_wider(\n\n    names_from = label,    # Pivot based on the 'label' column\n\n    values_from = present,\n    values_fill = list(0)# Use the 'present' column for the values\n    \n  )\n```\n:::\n\n\n\nusing arrange(0, we are able to see that that the centres are arranged in alphabetically order and they are similar ones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(pivoted_cc_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_cc_data$name[duplicated(pivoted_cc_data$name)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate_rows <- pivoted_cc_data %>%\n  # Count occurrences of each name\n  add_count(name) %>%\n  # Filter for names that appear more than once\n  filter(n > 1) %>%\n  # Remove the count column\n  select(-n) %>%\n  # Arrange by name for better readability\n  arrange(name)\n\nif (nrow(duplicate_rows) > 0) {\n  print(duplicate_rows)\n} else {\n  message(\"No duplicates found in the 'name' column.\")\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Adding coordinates to care centre\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(pivoted_cc_data$postal_code)) #parse a list as API cannot read df\n#unique reduces records to pass to portal\n#sort is used to easier to find geo codes\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n\n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address = i, \n                           postal = postal, \n                           latitude_wgs84 = lat,  # renamed to clarify coordinate system\n                           longitude_wgs84 = lng) # renamed to clarify coordinate system\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address = i, \n                               postal = NA, \n                               latitude_wgs84 = NA, \n                               longitude_wgs84 = NA)\n      }\n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address = i, \n                             postal = postal, \n                             latitude_wgs84 = lat, \n                             longitude_wgs84 = lng)\n      }\n    }\n    else {\n      new_row <- data.frame(address = i, \n                           postal = NA, \n                           latitude_wgs84 = NA, \n                           longitude_wgs84 = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  \n  # Convert to sf object with WGS84 coordinates (EPSG:4326)\n  # Filter out rows with NA coordinates first\n  valid_coords <- postal_coords[!is.na(postal_coords$latitude_wgs84) & \n                              !is.na(postal_coords$longitude_wgs84), ]\n  \n  if(nrow(valid_coords) > 0) {\n    coords_sf <- st_as_sf(valid_coords, \n                         coords = c(\"longitude_wgs84\", \"latitude_wgs84\"),\n                         crs = 4326)\n    \n    # Transform to SVY21 (EPSG:3414)\n    coords_svy21 <- st_transform(coords_sf, 3414)\n    \n    # Extract coordinates\n    coords_matrix <- st_coordinates(coords_svy21)\n    \n    # Add SVY21 coordinates back to the original dataframe with desired column names\n    valid_coords$longitude <- coords_matrix[, 1]  # SVY21 X coordinate as longitude\n    valid_coords$latitude <- coords_matrix[, 2]   # SVY21 Y coordinate as latitude\n    \n    # Merge back with rows that had NA coordinates\n    result <- merge(postal_coords, valid_coords[c(\"address\", \"longitude\", \"latitude\")], \n                   by = \"address\", all.x = TRUE)\n  } else {\n    # If no valid coordinates, add empty SVY21 columns\n    result <- postal_coords\n    result$longitude <- NA  # SVY21 coordinates\n    result$latitude <- NA   # SVY21 coordinates\n  }\n  \n  return(result)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n\n\nLeft join is used to where both data sets share the same properties of postal code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_data_final <- pivoted_cc_data %>%\n  left_join(coords, \n            join_by(postal_code == postal)\n)\n```\n:::\n\n\n\n## Population Data\n\n### Importing Data\n\nrename_with() of tidyverse package is used to perform column name standardisation by converting all variable names in the respective datasets to lowercase.\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2024.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata24 <- read_csv(\"data/popdata/respopagesex2024.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2023](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2023.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata23 <- read_csv(\"data/popdata/respopagesex2023.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2022](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2022.ashx) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- read_csv(\"data/popdata/respopagesex2022.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n::: callout-warning\n## PARSING ERROR\\*\n\n```         \nWarning: One or more parsing issues, call `problems()` on your data frame for details, e.g.:\n  dat <- vroom(...)\n  problems(dat)Rows: 60424 Columns: 6── Column specification\n```\n:::\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2021](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2021.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata21 <- read_csv(\"data/popdata/respopagesex2021.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2011-2020](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2011to2020.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20 <- read_csv(\"data/popdata/respopagesex2011to2020.csv\") %>%\n  rename_with(tolower) %>%\n  filter(time == 2020)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(popdata23)\n```\n:::\n\n\n\n### Checking for Missing Values\n\nTo check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.\n\nThe is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.\n\nResults: We noticed that there are 30 missing values popdata22 specifically under the column pop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_missing <- popdata20 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata20_missing)\n\npopdata21_missing <- popdata21 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata21_missing)\n\npopdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata22_missing)\n\npopdata23_missing <- popdata23 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata23_missing)\n\npopdata24_missing <- popdata24 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata24_missing)\n```\n:::\n\n\n\n### Issue with POPDATA22\n\nUsing the below code, we are able to see clearly the rows that are affected and in the pop column, it appears as NA. The csv file (respopagesex2022.csv) was opened using excel and each row returned in the below output was then cross checked in excel. Whole numbers with comma appeared in excel. This may be because read_csv() function expects a numeric value (double) in one of the columns, but instead, it found a string (the values in the column are likely formatted with commas, such as \"1,020\"). This is why the parser is raising an issue earlier on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_rows <- popdata22[is.na(popdata22$pop), ]\nprint(na_rows)\n```\n:::\n\n\n\nReferencing from [Stackoverflow](https://stackoverflow.com/questions/1523126/how-to-read-data-when-some-numbers-contain-commas-as-thousand-separator), the first line of the code is necessary as it defines a new class called `\"num.with.commas\"`. This class is intended to handle numeric values that are stored as strings with commas (e.g., `\"1,000\"`). Thereafter, the second line of the code defines a method to convert a `character` type to the custom `\"num.with.commas\"` class.\n\n-   The `gsub(\",\", \"\", from)` function removes commas from the string (e.g., `\"1,000\"` becomes `\"1000\"`)\n\n-   The `as.numeric()` function then converts the cleaned string into a numeric value (e.g., `\"1000\"` becomes `1000`)\n\nThis ensures that numbers with commas are properly converted to numeric values during data import.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetClass(\"num.with.commas\")\nsetAs(\"character\", \"num.with.commas\", \n        function(from) as.numeric(gsub(\",\", \"\", from) ) )\n```\n:::\n\n\n\nThe file is then re-imported again and specifically, the column 'pop' is parsed as a character field in facilitating the next step in removing commas within the population itself.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- read_csv(\"data/popdata/respopagesex2022.csv\", \n                      col_types = cols(\n                        PA = col_character(),\n                        SZ = col_character(),\n                        Age = col_character(),\n                        Sex = col_character(),\n                        Pop = col_character(),\n                        Time = col_number()  # Adjust if necessary\n                      )) %>%\n  rename_with(tolower)\n```\n:::\n\n\n\nAs previously stated, commas are present in the 'pop' column, hence, mutate()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- popdata22 %>%\n  mutate(pop = as.numeric(str_replace_all(pop, \",\", \"\")))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nIn the below, we've verified that there is no missing values and the above steps taken were successful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(popdata22) <- tolower(names(popdata22))\npopdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata22_missing)\n```\n:::\n\n\n\nHowever, upon running the below cod\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#First \nconvert_age <- function(df) {\n  df %>%\n    mutate(age = if_else(\n      age == \"90_and_over\", \"90\", age)) %>%\n    mutate(age = as.numeric(age))\n}\n\npopdata20_c <- convert_age(popdata23)\n```\n:::\n\n\n\nIn the below `code chunk a & b`, we noticed that it returned two different outputs: `90_and_over` and `90_and_Over`. This may explain why the error `NAs introduced by coercion` was returned. `Code-chunk a.`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 %>% \n  summarise(max_age = max(age, na.rm = TRUE))\n```\n:::\n\n\n\n`Code chunk b.`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata24 %>% \n  summarise(max_age = max(age, na.rm = TRUE))\n```\n:::\n\n\n\nHence, in addressing the above issue, the below code chunk was developed. First, The code defines a function called `convert_age` that takes a dataframe (`df`) as input. Inside the function, it modifies the `age` column using `mutate()`. It checks each value in the `age` column to see if it contains either \"\\_and_over\" or \"\\_and_Over\" (case-insensitive match). When a match is found, it extracts just the numeric part (e.g., \"90\" from \"90_and_over\") using `str_extract()`. If no match is found, it keeps the original value. The second `mutate()` converts the cleaned `age` column to numeric values, ensuring all ages are stored as numbers. The function returns the modified dataframe with standardised age values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_age <- function(df) {\n  df %>%\n    mutate(age = if_else(\n      str_detect(age, regex(\"_and_Over|_and_over\", ignore_case = TRUE)),\n      str_extract(age, \"\\\\d+\"),  # Extract just the numeric part\n      age\n    )) %>%\n    mutate(age = as.numeric(age))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_c <- convert_age(popdata20)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata21_c <- convert_age(popdata21)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22_c <- convert_age(popdata22)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata23_c <- convert_age(popdata23)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata24_c <- convert_age(popdata24)\n```\n:::\n\n\n\nAnother layer of confirmation of missing values was executed in ensuring no missing values were returned during the abovementioned process and it returns 0 for each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_missing <- popdata20_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata20_missing)\npopdata21_missing <- popdata21_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata21_missing)\npopdata22_missing <- popdata22_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata22_missing)\npopdata23_missing <- popdata23_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata23_missing)\npopdata24_missing <- popdata24_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata24_missing)\n```\n:::\n\n\n\n### Remove\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Return all rows where 'pop' is exactly 0\npopdata24_c %>% \n  filter(age>=60, pop==0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata23_c %>% \n  filter(age>=60, pop==0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22_c %>% \n  filter(age>=60, pop==0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata21_c %>% \n  filter(age>=60, pop==0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_c %>% \n  filter(age>=60, pop==0)\n```\n:::\n\n\n\n### Duplicate Check\n\nThe code provided checks for duplicate rows in each dataset by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \\> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \\> 1) keeps only the rows that appear more than once (i.e., duplicates).\n\nFor each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.\n\nThus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates in 'aac'\npopdata20_duplicate <- popdata20_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata20_duplicate)\n\n\n# Check for duplicates in 'counselling'\npopdata21_duplicate <- popdata21_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata21_duplicate)\n\n# Check for duplicates in 'daycare'\npopdata22_duplicate <- popdata22_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata22_duplicate)\n\n# Check for duplicates in 'dementia'\npopdata23_duplicate <- popdata23_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata23_duplicate)\n\n# Check for duplicates in 'hospice'\npopdata24_duplicate <- popdata24_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata24_duplicate)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## PROF\n\n#Population Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_age_column <- function(df) {\n  df %>%\n    mutate(\n      age = str_trim(age),  # Trim whitespace\n      age = if_else(age == \"90_and_over\", \"90\", age),  # Replace label\n      age = suppressWarnings(as.numeric(age))  # Convert safely\n    ) %>%\n    filter(!is.na(age))  # Remove rows that still couldn't be converted\n}\n```\n:::\n\n\n\n# Step 1: Load data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop20 <- read_rds(\"data/rds/popdata/refined/popdata20_c.rds\") %>% \n  clean_age_column()\npop21 <- read_rds(\"data/rds/popdata/refined/popdata21_c.rds\") %>% \n  clean_age_column()\npop22 <- read_rds(\"data/rds/popdata/refined/popdata22_c.rds\") %>% \n  clean_age_column()\npop23 <- read_rds(\"data/rds/popdata/refined/popdata23_c.rds\") %>% \n  clean_age_column()\npop24 <- read_rds(\"data/rds/popdata/refined/popdata24_c.rds\") %>% \n  clean_age_column()\n```\n:::\n\n\n\n# Step 2: Compute survival rates for each year-to-year transition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_survival_rate <- function(df1, df2) {\n  df1 %>%\n    filter(age >= 64 & age < 91) %>%\n    mutate(age = age + 1) %>%\n    inner_join(df2, \n               by = c(\"age\", \"sex\", \"pa\", \"sz\"),\n               suffix = c(\"_prev\", \"_next\")) %>%\n    mutate(rate = pop_next / pop_prev) %>%\n    select(pa, sz, age, sex, rate)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2020_2021 <- compute_survival_rate(popdata20_c, popdata21_c)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2021_2022 <- compute_survival_rate(pop21, popdata22)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2022_2023 <- compute_survival_rate(popdata22, pop23)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2023_2024 <- compute_survival_rate(pop23, pop24)\n```\n:::\n\n\n\n# Step 3: Average the survival rates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_survival_rates <- bind_rows(\n  rates_2020_2021,\n  rates_2021_2022,\n  rates_2022_2023,\n  rates_2023_2024\n) %>%\n  group_by(age, sex, pa, sz) %>%\n  summarise(avg_rate = mean(rate, na.rm = TRUE), .groups = \"drop\")\n```\n:::\n\n\n\n# Step 4: Forecast each year 2025 to 2029\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_year <- function(base_pop, rates, year) {\n  next_pop <- base_pop %>%\n    filter(age >= 64 & age < 90) %>%\n    mutate(age = age + 1) %>%\n    left_join(rates, by = c(\"age\", \"sex\", \"pa\", \"sz\")) %>%\n    mutate(pop = pop * avg_rate) %>%\n    select(age, sex, pa, sz, pop)\n\n  # Handle 90+\n  age_89 <- base_pop %>%\n    filter(age == 89) %>%\n    select(sex, pa, sz, pop) %>%\n    mutate(age = 90)\n\n  age_90plus <- base_pop %>%\n    filter(age == 90) %>%\n    select(sex, pa, sz, pop)\n\n  pop_90 <- bind_rows(age_89, age_90plus) %>%\n    group_by(sex, pa, sz) %>%\n    summarise(age = 90, pop = sum(pop), .groups = \"drop\")\n\n  bind_rows(next_pop, pop_90) %>%\n    mutate(year = year) %>%\n    arrange(pa, sz, sex, age)\n}\n```\n:::\n\n\n\n# Step 5: Loop over the years\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List to store forecasts\nforecast_list <- list()\nbase_pop <- pop24\n\nfor (y in 2025:2029) {\n  next_forecast <- forecast_year(base_pop, avg_survival_rates, y)\n  forecast_list[[as.character(y)]] <- next_forecast\n  base_pop <- next_forecast %>% select(pa, sz, age, sex,  pop)\n}\n```\n:::\n\n\n\n# Final Output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_forecasts <- bind_rows(forecast_list)\n```\n:::\n\n\n\n# Exploratory Data Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmpa_mode(\"view\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n:::\n\n\n\n## Density of Care Centre in Each Subzone\n\nrefer chapt 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`CC Count` <- lengths(st_intersects(mpsz, ))\n```\n:::\n\n\n\n# References\n\nBurdziej, J. (2019). Using hexagonal grids and network analysis for spatial accessibility assessment in urban environments-A case study of public amenities in Toruń. Miscellanea Geographica. Regional Studies on Development, 23(2), 99-110.\n\nKam, T. S, (2024). R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app/\n\nTan, K. (2023). Take-home Exercise 1: Geospatial Analytics for Public Good. Retrieved from <https://isss624-kytjy.netlify.app/take-home_ex/take-home_ex1/the1#background>\n\nMinistry of Health Singapore. (2022). Healthier SG White Paper. Retrieved from https://file.go.gov.sg/healthiersg-whitepaper-pdf.pdf\n\nUrban Redevelopment Authority. (2023). Master Plan 2019 Planning Area Boundary (No Sea) (2024) \\[Dataset\\]. data.gov.sg. Retrieved February 23, 2025 from https://data.gov.sg/datasets/d_6c6d7361dd826d97b91bac914ca6b2ac/view\n",
    "supporting": [
      "methodology_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}