{
  "hash": "705834d15ade1f2391ff11634260de53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preview\"\ndate: \"21st Feb, 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute: \n  eval: false #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n\n\n# Overview\n\nIn this section, we will acquire the data sets from various government open-sources data repository and websites. Thereafter, we will install the necessary R packages and import the data sets. In each data set, we will delve into the necessary checks, issues faced and steps into resolving the issue. Thereafter, exploratory data analysis is done.\n\n# Data Acquisition\n\nIn this research, 3 main spectrum of data will be required for this research, namely the Population Data, Master Plan 2019 Subzone boundary and Care Centres. These datasets are gathered from multiple open-source websites which includes Singapore Department of Statistics, Data.gov.sg, and Agency of Integrated Care.\n\n![Figure x: Data Overview](/metho_images/data_overview.png){fig-align=\"center\"}\n\n##Singapore Master Plan 2019 Subzone Boundary\n\nThe Singapore Master Plan 2019 Planning Subzone Boundary is a ESRI shapefile that is obtained from Data.gov.sg.\n\n## Population Data\n\nThe Singapore Resident by Planning Area/Subzone, Single Year of Age and Sex, June 2024 is selected for this\n\nAs the version January 2025 will be not be ready in due time for this research project, thus, the version of June 2024 is used.\n\n## WebScraping of Care Centres\n\nDue to the lack of a centralised data of all care centres, web scraping is warranted in obtaining the information of the care centres. The geographical locations of the Care Centres alongside the centre names such as Active Ageing Centre, Day Care, Community Rehabilitation Centre, Centre-based Nursing were extracted using a web scraping tool, Web Scraper, available in Chrome web store as Seen in Figure x. As there is no centralised file that consist of the centre names and their locations, the location of each centre has to be manually extracted from the [Care Services](https://www.aic.sg/care-services/) webpage of the Agency of Integrated Care as seen in Figure x.\n\nStep 0: Download Web Scraper from Chrome web store\n\nWeb Scraper is used as it is free, works reasonably well and available in both Chrome and Firefox web store. In the below steps, Chrome will be the default web browser used.\n\n![*Figure x: Web Scraper*](/metho_images/step0.png)\n\nStep 1: Navigate to Developer Tools in Chrome Web Browser\n\nAfter downloading the extension from Chrome Web Store, press onto the menu bar at the right of the browser and locate Developer Tools while onto the website you would like to scrape information from.\n\n![*Figure x: Web Scraper*](/metho_images/step1.png)\n\nStep 2: Interface for Webscraper\n\nAfter clicking onto Developer Tools, click onto the Web Scraper in the menu bar (in black). Following which the below interface will appear.\n\n[![](/metho_images/step2.png){width=\"499\"}](Figure%20x:%20Locate%20Developer%20Tools)\n\nStep 3: Create New Sitemap\n\nClick onto \"create new sitemap\", thereafter \"Create Sitemap\". Sitemap Name will be the overarching term used for these information; in this instance, it will be AAC. The Start URL will be the HTML link that you would like the information to be scraped from.\n\n![Figure x:](/metho_images/step3.png){fig-align=\"center\"}\n\nStep 4: Add New Selector\n\nAfter creating a new sitemap, the following interface will appear. Click onto the \"Add new selector\" to select the information to scrape.\n\n![Figure x:](/metho_images/step4.png){fig-align=\"center\"}\n\nStep 5: Selecting Whole Box\n\nFirstly, the id will be the column name. For Type, select Element Attribute from the drop down selection. Thereafter, press on Select under Selector and select two boxes of each centre as seen in the figure below (the remaining boxes will be highlighted through its intelligent function) and press onto Done Selecting in the green box.\n\n![Figure x:](/metho_images/step5.png){fig-align=\"center\"}\n\nStep 6: Sitemap Interface\n\nAfter adding a new selector, the sitemap page will appear the selector that you've inputted.\n\n![Figure x: Step 6 - Create New Sitemap](/metho_images/step6.png){fig-align=\"center\"}\n\nStep 7: Selecting Name of Care Centre\n\nFirstly, the id will be name (with reference to the name of care centre), serving as the column name. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 names of the care centres (The remaining care centres will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple names and root parent selector will be root and press onto Save Selector.\n\n![Figure x: Step 7 - Selecting Name of Care Centre](/metho_images/step7.png){fig-align=\"center\"}\n\nStep 8: Create New Sitemap\n\nA popup window will be prompted and Group selectors was selected.\n\n![Figure x: Step 8 - Create New Sitemap](/metho_images/step8.png){fig-align=\"center\"}\n\nStep 9: Selecting Address of Care Centre\n\nSimilar to Step 7, the id will be address. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 addresses of the care centres (Remaining addresses will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple addresses and parent selector will be wrapper_for_main_name (as we grouped selectors in step 8) and press onto Save Selector.\n\n![Figure x: Step 9 - Selecting Address of Care Centre](/metho_images/step9.png){fig-align=\"center\"}\n\nStep 10: Data Preview\n\nPrior to data scraping, the data is previewed in ensuring each name of the care centre is correctly tagged to the address using the main website to verify.\n\n![Figure x: Step 10 - Data Preview](/metho_images/step10.png){fig-align=\"center\"}\n\nStep 11: Commence Scraping\n\nHead over to sitemap aac and click onto Scrape. A new browser will appear indicating that it is in process of scraping. It will be closed automatically once the process has ended.\n\n![Figure x: Step 11 - Commence Scraping](/metho_images/step11.png){fig-align=\"center\"}\n\nStep 11: Export Data\n\nExport data is selected upon clicking sitemap aac. 2 file options are offered: csv and xlsx. The former was chosen as CSV files are simple and portable which doesn't complicate data processing. Thereafter the data will be downloaded.\n\n![Figure x:](/metho_images/step12.png){fig-align=\"center\"}\n\nStep 11: View CSV File\n\nIn ensuring the web scraping successful and accurate, the csv. file is opened and examined.\n\n![Figure x: Step 11 - View CSV File](/metho_images/step13.png){fig-align=\"center\"}\n\nThe above steps were repeated for each type of care centre. All of the Care Centre data were extracted on 7th February 2025.\n\n# Data Cleaning & Manipulation\n\n## Installing Packages\n\n::: panel-tabset\nThe following packages are required for this section:\n\n| Package | Description |\n|-------------------------------------|-----------------------------------|\n| [**tidyverse**](https://www.tidyverse.org/) | For non-spatial data wrangling that includes dplyr, tibble, ggplot2, readr, tidyr, stringr, forcats, lubridate and purr |\n| [**sf**](https://r-spatial.github.io/sf/) | For importing, managing, and handling geospatial data |\n| [**jsonlite**](https://cran.r-project.org/web/packages/jsonlite/index.html) | For interacting with a web API |\n| [**rvest**](https://cran.r-project.org/web/packages/rvest/index.html) | A wrapper around xml2 and httr packages |\n| [**sfdep**](https://sfdep.josiahparry.com/) | Used to compute spatial weights, global and local spatial autocorrelation statistics |\n| [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) | for creating elegent and cartographic quality thematic maps |\n| [**knitr**](https://cran.r-project.org/web/packages/knitr/index.html) | For dynamic report generation |\n| [**patchwork**](https://patchwork.data-imaginist.com/) | For plot manipulation |\n| [**leaflet**](https://rstudio.github.io/leaflet/) | For interactive maps |\n| [**scales**](https://scales.r-lib.org/) | For scaling graphs |\n| [**lubridate**](https://lubridate.tidyverse.org/) | For date-time manipulation |\n| [**tmap**](https://r-graph-gallery.com/package/tmap.html) | For creating interactive maps |\n| [**DT**](https://rstudio.github.io/DT/) | provides an R interface to the JavaScript library DataTables. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables. |\n\nThe code chunk below, using `p_load` function of the [**pacman**](https://cran.r-project.org/web/packages/pacman/pacman.pdf) package, ensures that packages required are installed and loaded in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf,\n               jsonlite, rvest, knitr, patchwork,\n               leaflet, scales, lubridate, tmap, DT, geojsonsf, scales,\n               VIM, mice, broom)\n```\n:::\n\n\n:::\n\n## Population Data\n\n### Overview\n\nIn this section, a total of 4 population datasets from year 2020 to year 2024 will be used in the analysis. The datasets will be cleaned. Survival analysis will be done in estimating the population for age 60 and above for the period 2025 to 2029.\n\n### Importing Data\n\nIn importing data, `read_csv()` and `rename_with()` of tidyverse package are used to perform column name standardisation by converting all variable names in the respective datasets to lowercase.\n\n:::: panel-tabset\n### Population Data 2024\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2024.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata24 <- read_csv(\"data/popdata/respopagesex2024.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n### Population Data 2023\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2023](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2023.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata23 <- read_csv(\"data/popdata/respopagesex2023.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n### Population Data 2022\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2022](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2022.ashx) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- read_csv(\"data/popdata/respopagesex2022.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n::: callout-warning\nPARSING ERROR\\*\n\n```         \nWarning: One or more parsing issues, call `problems()` on your data frame for details, e.g.:\n  dat <- vroom(...)\n  problems(dat)Rows: 60424 Columns: 6── Column specification\n```\n:::\n\n### Population Data 2021\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2021](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2021.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata21 <- read_csv(\"data/popdata/respopagesex2021.csv\") %>%\n  rename_with(tolower)\n```\n:::\n\n\n\n### Population Data 2020\n\n[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2011-2020](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2011to2020.ashx)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20 <- read_csv(\"data/popdata/respopagesex2011to2020.csv\") %>%\n  rename_with(tolower) %>%\n  filter(time == 2020)\n```\n:::\n\n\n::::\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(popdata23)\n```\n:::\n\n\n\n### Checking for Missing Values\n\nTo check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.\n\nThe is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.\n\nResults: We noticed that there are 30 missing values popdata22 specifically under the column pop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_missing <- popdata20 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata20_missing)\n\npopdata21_missing <- popdata21 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata21_missing)\n\npopdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata22_missing)\n\npopdata23_missing <- popdata23 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata23_missing)\n\npopdata24_missing <- popdata24 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata24_missing)\n```\n:::\n\n\n\n### Issue with `POPDATA22`\n\nUsing the below code, we are able to see clearly the rows that are affected and in the pop column, it appears as NA. The csv file (respopagesex2022.csv) was opened using excel and each row returned in the below output was then cross checked in excel. Whole numbers with comma appeared in excel. This may be because read_csv() function expects a numeric value (double) in one of the columns, but instead, it found a string (the values in the column are likely formatted with commas, such as \"1,020\"). This is why the parser is raising an issue earlier on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_rows <- popdata22[is.na(popdata22$pop), ]\nprint(na_rows)\n```\n:::\n\n\n\nReferencing from [Stackoverflow](https://stackoverflow.com/questions/1523126/how-to-read-data-when-some-numbers-contain-commas-as-thousand-separator), the first line of the code is necessary as it defines a new class called `\"num.with.commas\"`. This class is intended to handle numeric values that are stored as strings with commas (e.g., `\"1,000\"`). Thereafter, the second line of the code defines a method to convert a `character` type to the custom `\"num.with.commas\"` class.\n\n-   The `gsub(\",\", \"\", from)` function removes commas from the string (e.g., `\"1,000\"` becomes `\"1000\"`)\n\n-   The `as.numeric()` function then converts the cleaned string into a numeric value (e.g., `\"1000\"` becomes `1000`)\n\nThis ensures that numbers with commas are properly converted to numeric values during data import.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetClass(\"num.with.commas\")\nsetAs(\"character\", \"num.with.commas\", \n        function(from) as.numeric(gsub(\",\", \"\", from) ) )\n```\n:::\n\n\n\nThe file is then re-imported again and specifically, the column 'pop' is parsed as a character field in facilitating the next step in removing commas within the population itself.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- read_csv(\"data/popdata/respopagesex2022.csv\", \n                      col_types = cols(\n                        PA = col_character(),\n                        SZ = col_character(),\n                        Age = col_character(),\n                        Sex = col_character(),\n                        Pop = col_character(),\n                        Time = col_number()  # Adjust if necessary\n                      )) %>%\n  rename_with(tolower)\n```\n:::\n\n\n\nAs previously stated, commas are present in the 'pop' column, hence, `mutate()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata22 <- popdata22 %>%\n  mutate(pop = as.numeric(str_replace_all(pop, \",\", \"\")))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nIn the below codechunk, it was verified that there is no missing values and the above steps taken were successful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(popdata22) <- tolower(names(popdata22))\npopdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))\nprint(popdata22_missing)\n```\n:::\n\n\n\nIn the below `code chunk a & b`, we noticed that it returned two different outputs: `90_and_over` and `90_and_Over`. This may explain why the error `NAs introduced by coercion` was returned.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#code chunk a\npopdata22 %>% \n  summarise(max_age = max(age, na.rm = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#code chunk b\npopdata24 %>% \n  summarise(max_age = max(age, na.rm = TRUE))\n```\n:::\n\n\n\nHence, in addressing the above issue, the below code chunk was developed. First, The code defines a function called `convert_age` that takes a dataframe (`df`) as input. Inside the function, it modifies the `age` column using `mutate()`. It checks each value in the `age` column to see if it contains either \"\\_and_over\" or \"\\_and_Over\" (case-insensitive match). When a match is found, it extracts just the numeric part (e.g., \"90\" from \"90_and_over\") using `str_extract()`. If no match is found, it keeps the original value. The second `mutate()` converts the cleaned `age` column to numeric values, ensuring all ages are stored as numbers. The function returns the modified dataframe with standardised age values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_age <- function(df) {\n  df %>%\n    mutate(age = if_else(\n      str_detect(age, regex(\"_and_Over|_and_over\", ignore_case = TRUE)),\n      str_extract(age, \"\\\\d+\"),  # Extract just the numeric part\n      age\n    )) %>%\n    mutate(age = as.numeric(age))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_c <- convert_age(popdata20)\npopdata21_c <- convert_age(popdata21)\npopdata22_c <- convert_age(popdata22)\npopdata23_c <- convert_age(popdata23)\npopdata24_c <- convert_age(popdata24)\n```\n:::\n\n\n\nAnother layer of confirmation of missing values was executed in ensuring no missing values were returned during the abovementioned process and it returns 0 for each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata20_missing <- popdata20_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata20_missing)\npopdata21_missing <- popdata21_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata21_missing)\npopdata22_missing <- popdata22_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata22_missing)\npopdata23_missing <- popdata23_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata23_missing)\npopdata24_missing <- popdata24_c %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.)))) \nprint(popdata24_missing)\n```\n:::\n\n\n\n### Duplicate Check\n\nThe code provided checks for duplicate rows in each dataset by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \\> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \\> 1) keeps only the rows that appear more than once (i.e., duplicates).\n\nFor each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.\n\nThus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates in 'aac'\npopdata20_duplicate <- popdata20_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata20_duplicate)\n\n\n# Check for duplicates in 'counselling'\npopdata21_duplicate <- popdata21_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata21_duplicate)\n\n# Check for duplicates in 'daycare'\npopdata22_duplicate <- popdata22_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata22_duplicate)\n\n# Check for duplicates in 'dementia'\npopdata23_duplicate <- popdata23_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata23_duplicate)\n\n# Check for duplicates in 'hospice'\npopdata24_duplicate <- popdata24_c %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\nshow(popdata24_duplicate)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Percentage of Missing Values\n\nIn `pop(year)_geri_zero`, the dataframe consists of older adults aged 60 & above where the population is zero meanwhile `pop20_geri` consists of the full dataframe of the older adults aged 60 & above. Lastly, the code chunk returns the percentage of missing values in df. From 2020 to 2024, there are 43 - 41% of missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop20_geri_zero <- popdata20_c %>%\n  filter(pop == 0, age>=60)\npop20_geri <- popdata20_c %>%\n  filter(age>=60)\n(nrow(pop20_geri_zero) / nrow(pop20_geri)) * 100\n\npop21_geri_zero <- popdata21_c %>%\n  filter(pop == 0, age>=60)\npop21_geri <- popdata21_c %>%\n  filter(age>=60)\n(nrow(pop21_geri_zero) / nrow(pop21_geri)) * 100\n\npop22_geri_zero <- popdata22_c %>%\n  filter(pop == 0, age>=60)\npop22_geri <- popdata22_c %>%\n  filter(age>=60)\n(nrow(pop22_geri_zero) / nrow(pop22_geri)) * 100\n\npop23_geri_zero <- popdata23_c %>%\n  filter(pop == 0, age>=60)\npop23_geri <- popdata23_c %>%\n  filter(age>=60)\n(nrow(pop23_geri_zero) / nrow(pop23_geri)) * 100\n\npop24_geri_zero <- popdata24_c %>%\n  filter(pop == 0, age>=60)\npop24_geri <- popdata24_c %>%\n  filter(age>=60)\n(nrow(pop24_geri_zero) / nrow(pop24_geri)) * 100\n```\n:::\n\n\n\n### Survival Analysis\n\n#### Introduction\n\nIn this section, the population data spanning from 2020 to 2024 will undergo cleaning and transformation processes to prepare it for advanced analytical modeling. Following this data preparation phase, survival analysis methodologies will be employed to predict the older adult population demographics from 2025 to 2029. The primary objective of this analytical approach is to calculate survival rates, where death serves as the event of interest in our survival framework. Given the nature of the population data being utilised, we adopt a non-parametric analytical stance, implementing the Kaplan-Meier estimator as our core statistical method for survival probability estimation. A fundamental assumption underlying this analysis is that residents maintain residential stability within their respective subzones throughout the entire study period. Under this assumption, any observed decrease in population within a given subzone can be reasonably attributed to mortality events, as migration and relocation factors are held constant. This methodological framework allows for a more accurate assessment of demographic changes driven primarily by natural population dynamics rather than residential mobility patterns.\n\n#### Step 0: Defining `clean_age_column`Function\n\nThis code defines a function called `clean_age_column` that takes a dataframe as input and processes its `age` column to ensure consistent numeric values. First, it trims any leading or trailing whitespace from the `age` column using `str_trim`. Next, it replaces the label `\"90_and_over\"` with `\"90\"` to standardise the representation of ages 90 and above. Then, it converts the `age` column to numeric values using `as.numeric`, while suppressing any warnings that might arise from non-numeric entries (e.g., empty strings or invalid values). Finally, the function filters out any rows where the `age` could not be converted to a numeric value (resulting in `NA`), ensuring only valid numeric ages remain in the dataframe. The cleaned dataframe is then returned as the output. This function ensures uniformity and removing invalid entries.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_age_column <- function(df) {\n  df %>%\n    mutate(\n      age = str_trim(age),  # Trim whitespace\n      age = if_else(age == \"90_and_over\", \"90\", age),  # Replace label\n      age = suppressWarnings(as.numeric(age))  # Convert safely\n    ) %>%\n    filter(!is.na(age))  # Remove rows that still couldn't be converted\n}\n```\n:::\n\n\n\n#### Step 1: Load data\n\nFirst, we will read the population data from year 2020 to 2024 of the rds file. Thereafter, we will apply `clean_age_column()` function that was defined in step 0 to the loaded dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop20 <- read_rds(\"data/rds/popdata/refined/popdata20_c.rds\") %>% \n  clean_age_column()\npop21 <- read_rds(\"data/rds/popdata/refined/popdata21_c.rds\") %>% \n  clean_age_column()\npop22 <- read_rds(\"data/rds/popdata/refined/popdata22_c.rds\") %>% \n  clean_age_column()\npop23 <- read_rds(\"data/rds/popdata/refined/popdata23_c.rds\") %>% \n  clean_age_column()\npop24 <- read_rds(\"data/rds/popdata/refined/popdata24_c.rds\") %>% \n  clean_age_column()\n```\n:::\n\n\n\n#### Step 2: Compute survival rates for each year-to-year transition\n\nThis code defines a function called `compute_survival_rate` that calculates survival rates between two consecutive time periods (e.g., years) for a population dataset. The function takes two dataframes (`df1` and `df2`) as inputs, representing population data from two different time points (e.g., 2020 and 2021).\n\nFirst, the function filters `df1` to include only individuals aged **59 to 90**, as survival analysis is often focused on older populations. It then increments the age by 1 (using `mutate(age = age + 1)`) to align the ages with the next time period (`df2`). Next, it performs an **inner join** between the modified `df1` and `df2` using matching columns (`age`, `sex`, `pa` \\[possibly a region code\\], and `sz`. The join suffixes (`_prev` and `_next`) distinguish between the population counts from the two time periods.\n\nAfter joining, the function computes the **survival rate** (`rate`) by dividing the population in the later period (`pop_next`) by the population in the earlier period (`pop_prev`). Finally, it selects and returns only the relevant columns (`pa`, `sz`, `age`, `sex`, `rate`, `pop_prev`, `pop_next`) for further analysis.\n\nIn summary, this function helps estimate how many people from an initial cohort (in `df1`) survived into the next period (in `df2`) by age, sex, and other groupings, providing key insights for demographic or actuarial studies.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_survival_rate <- function(df1, df2) {\n  df1 %>%\n    filter(age >= 59 & age < 91) %>%\n    mutate(age = age + 1) %>%\n    inner_join(df2, \n               by = c(\"age\", \"sex\", \"pa\", \"sz\"),\n               suffix = c(\"_prev\", \"_next\")) %>%\n    mutate(rate = pop_next / pop_prev) %>%\n    select(pa, sz, age, sex, rate, pop_prev, pop_next)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2020_2021 <- compute_survival_rate(pop20, pop21)\nrates_2021_2022 <- compute_survival_rate(pop21, pop22)\nrates_2022_2023 <- compute_survival_rate(pop22, pop23)\nrates_2023_2024 <- compute_survival_rate(pop23, pop24)\n```\n:::\n\n\n\nHowever, upon closer inspection of the df `rates_2020_2021`, we noticed the column `rate` consists of `Inf` rate. Upon closer examination of the columns `pop_past` and \\`pop_next\\`, there is an increase of population which is not logical. This predicament is consistent throughout the remaining 3 dataframes too. Therefore, step 2 needs to be refined in addressing this issue.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2020_2021[is.infinite(rates_2020_2021$rate), ]\n```\n:::\n\n\n\n#### Step 2: Refined Computing Survival Rates\n\nThe function processes survival rate data through four sequential steps, now correctly using dplyr's grouping mechanism. First, it groups the data by both age and sex, which is crucial because survival rates likely vary significantly across these demographics. Within these groups, it performs three key operations: (1) capping any rates above 1.0 at 1.0 (assuming these represent survival probabilities that shouldn't exceed 100%), (2) replacing infinite values (which occur when dividing by zero) with the maximum finite rate found in the data, and (3) imputing missing values (NaN) with the median rate for that specific age-sex group. After these grouped operations, it ungroups the data and performs a final safety check, replacing any remaining missing values with 1.0 (a neutral value indicating no change).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_age_column <- function(df) {\n  df %>%\n    mutate(\n      age = str_trim(age),  # Trim whitespace\n      age = if_else(age == \"90_and_over\", \"90\", age),  # Replace label\n      age = suppressWarnings(as.numeric(age))  # Convert safely\n    ) %>%\n    filter(!is.na(age))  # Remove rows that still couldn't be converted\n}\npop20 <- read_rds(\"data/rds/popdata/refined/popdata20_c.rds\") %>% \n  clean_age_column()\npop21 <- read_rds(\"data/rds/popdata/refined/popdata21_c.rds\") %>% \n  clean_age_column()\npop22 <- read_rds(\"data/rds/popdata/refined/popdata22_c.rds\") %>% \n  clean_age_column()\npop23 <- read_rds(\"data/rds/popdata/refined/popdata23_c.rds\") %>% \n  clean_age_column()\npop24 <- read_rds(\"data/rds/popdata/refined/popdata24_c.rds\") %>% \n  clean_age_column()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_survival_rate <- function(df1, df2) {\n  df1 %>%\n    filter(age >= 59 & age < 91) %>%\n    mutate(age = age + 1) %>%\n    inner_join(df2, \n               by = c(\"age\", \"sex\", \"pa\", \"sz\"),\n               suffix = c(\"_prev\", \"_next\")) %>%\n    mutate(rate = pop_next / pop_prev) %>%\n    select(pa, sz, age, sex, rate, pop_prev, pop_next)\n}\n```\n:::\n\n\n\nThe `clean_rates` function serves as a natural post-processing step for the output of `compute_survival_rate`, addressing several statistical and data quality considerations inherent to survival rate calculations. The compute_survival_rate function generates initial survival rate estimates by computing population ratios between two time periods (pop_next/pop_prev) for specific demographic groups (defined by age, sex, pa, and sz). This calculation can produce three types of problematic outputs that clean_rates systematically addresses: (1) undefined values (infinities) resulting from zero denominators, (2) rates outside the valid \\[0,1\\] range for probabilities, and (3) missing values from the inner join operation or zero populations.\n\nThe cleaning process employs statistically appropriate methods: replacement of infinite values with NAs followed by median imputation within age-sex strata maintains the grouped structure used in the original calculation. The bounding of values preserves the probabilistic interpretation of survival rates. The two functions together implement a complete analytical workflow where compute_survival_rate performs the demographic-specific calculation and `clean_rates` ensures the results meet necessary statistical assumptions for subsequent analysis. This separation of concerns between calculation and validation follows established data processing paradigms, with each function handling a distinct phase of the data transformation pipeline.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_rates <- function(df, rate_type = \"survival\") {\n  df %>%\n    group_by(age, sex) %>%\n    mutate(\n      # Handle infinites first - replace with NA for proper imputation\n      rate = ifelse(is.infinite(rate), NA, rate),\n      \n      # Detect illogical population scenario: pop_next > pop_prev\n      # This suggests population growth rather than mortality/migration\n      pop_growth_detected = ifelse(exists(\"pop_next\") && exists(\"pop_prev\"), \n                                  pop_next > pop_prev, FALSE),\n      \n      # If population growth detected, impute rate based on rate_type\n      rate = case_when(\n        pop_growth_detected & rate_type == \"survival\" ~ 1.0,  # Perfect survival\n        pop_growth_detected & rate_type == \"probability\" ~ 0.0,  # Zero probability of death\n        pop_growth_detected & rate_type == \"hazard\" ~ 0.0,  # Zero hazard rate\n        pop_growth_detected ~ NA_real_,  # Set to NA for other rate types\n        TRUE ~ rate  # Keep original rate if no population growth issue\n      ),\n      \n      # Cap rates only if they represent probabilities\n      rate = if(rate_type == \"survival\" || rate_type == \"probability\") {\n        pmin(pmax(rate, 0), 1)  # Bound between 0 and 1\n      } else {\n        pmax(rate, 0)  # Only ensure non-negative for hazard rates\n      },\n      \n      # Impute missing values with group median\n      rate = ifelse(is.na(rate), median(rate, na.rm = TRUE), rate)\n    ) %>%\n    ungroup() %>%\n    # Final check - if entire groups had no valid data\n    mutate(\n      rate = ifelse(is.na(rate), \n                   if(rate_type == \"survival\") 1.0 else 0.0, \n                   rate)\n    ) %>%\n    # Clean up temporary column\n    select(-pop_growth_detected)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2020_2021 <- compute_survival_rate(pop20, pop21) %>% clean_rates()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2021_2022 <- compute_survival_rate(pop21, pop22) %>% clean_rates()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2022_2023 <- compute_survival_rate(pop22, pop23) %>% clean_rates()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrates_2023_2024 <- compute_survival_rate(pop23, pop24) %>% clean_rates()\n```\n:::\n\n\n\n#### Step 3: Average the survival rates\n\nThis code calculates average survival rates across multiple years by combining data from four different time periods and then computing the mean rates for each demographic and geographic group. `bind_rows()` function stacks the four datasets (rates_2020_2021, rates_2021_2022, rates_2022_2023, and rates_2023_2024) vertically into one combined dataset, essentially appending all the rows together. Next, the `group_by()` function groups the combined data by four variables: age, sex, planning area (pa), and subzone (sz), creating distinct groups for each unique combination of these characteristics. The `summarise()` function then calculates the average survival rate for each group by taking the mean of the 'rate' column, while the `na.rm = TRUE` parameter ensures that any missing values are excluded from the calculation, and `.groups = \"drop\"` ungroups the data after summarizing. Finally, the `distinct()` function removes any potential duplicate rows by keeping only unique combinations of age, sex, pa, and sz, while `.keep_all = TRUE` preserves all other columns in the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_survival_rates <- bind_rows(\n  rates_2020_2021,\n  rates_2021_2022,\n  rates_2022_2023,\n  rates_2023_2024\n) %>%\n  group_by(age, sex, pa, sz) %>%\n  summarise(avg_rate = mean(rate, na.rm = TRUE), .groups = \"drop\") %>%\n  distinct(age, sex, pa, sz, .keep_all = TRUE) #remove potential duplicates \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Step 4: Forecast each year 2025 to 2029\n\nThe `forecast_year` function defines a vector of required column names (age, sex, pa, sz, pop) that must be present in the input dateset. The function uses a conditional check with `all()` and `%in%` operators to verify that every required column exists in the base population dataset. If any columns are missing, the function immediately terminates execution using `stop()` and provides a detailed error message that specifically lists which columns are absent, calculated using `setdiff()` to find the difference between required and available columns.\n\nNext, the function creates a cleaned version of the base population data by first converting the population column to numeric format using `as.numeric()`. It then removes any rows where the population value is NA (missing), as these would create errors in subsequent calculations. The `select(all_of(required_cols))` ensures that only the necessary columns are retained, reducing memory usage and eliminating potential conflicts from extraneous variables.\n\nIn step 3, the aggregation step addresses the possibility of duplicate records or multiple entries for the same demographic-geographic combination. By grouping the data by age, sex, planning area, and subzone, then summing the population values, the function ensures that each unique combination has a single, consolidated population count. This is particularly important in demographic data where the same group might appear multiple times due to data collection methods or administrative boundaries. The `.groups = \"drop\"` parameter automatically ungroups the data after summarization, preventing issues in subsequent operations.\n\nIn step 4 of the code chunk, for individuals aged 59-88, the function implements a cohort-component method where each age group advances by one year (age + 1), simulating the passage of time. The function then performs a left join with the survival rates dataset to match each demographic-geographic group with their appropriate survival rate. This join operation is critical because survival rates typically vary by age, sex, and location due to factors like healthcare access, socioeconomic conditions, and environmental factors. When survival rates are missing for specific groups, the function implements a robust fallback mechanism using `coalesce()` combined with the median survival rate from the entire rates dataset. This approach prevents data loss while providing a reasonable estimate based on the overall population's survival characteristics. The population projection is then calculated by multiplying the current population by the survival rate, effectively reducing each cohort based on expected mortality.\n\nIn step 5, The treatment of individuals aged 89 and above reflects demographic modeling conventions where very elderly populations are often grouped together due to small sample sizes and similar demographic characteristics. The function consolidates all individuals aged 89 and above into a single age category (90), recognizing that survival patterns become more uniform at advanced ages. This approach uses survival rates specific to age 90, and when these rates are unavailable, it applies the median survival rate specifically calculated from age-90 data rather than the entire dataset, providing a more age-appropriate estimate.\n\nIn step 6, the function combines the forecasted populations from both the main aging process (ages 60-89) and the elderly category (90+) using `bind_rows()`, creating a comprehensive forecast dataset. It adds the forecast year as a new column, enabling tracking of temporal changes across multiple projection periods. The final aggregation step groups by all relevant variables including the year and sums any duplicate combinations that might have emerged from the separate processing of different age ranges, ensuring data consistency and preventing double-counting.\n\nIn the second code chunk, the forecasting loop implements a cohort-component projection method where each year's forecast becomes the foundation for the next year's projection. This approach captures the cumulative effects of demographic change over time, as population structure evolves with each iteration. The loop begins with 2024 population data (`pop24`) as the baseline, representing the most recent observed population distribution. The `tryCatch()` mechanism provides comprehensive error handling that prevents the entire forecasting process from failing due to issues with individual years. When errors occur, the system captures detailed debugging information including the data structure of the current population using `str()`, which reveals variable types, dimensions, and sample values. Each successful forecast year produces a new dataset that replaces the current population for the next iteration, creating a sequential chain of demographic projections.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#1st code chunk\nforecast_year <- function(base_pop, rates, year) {\n  # 1. Validate and clean input data\n  required_cols <- c(\"age\", \"sex\", \"pa\", \"sz\", \"pop\")\n  if(!all(required_cols %in% names(base_pop))) {\n    stop(paste(\"Missing required columns:\", \n              setdiff(required_cols, names(base_pop))))\n  }\n  \n  # 2. Convert pop to numeric safely\n  base_pop_clean <- base_pop %>%\n    mutate(pop = as.numeric(pop)) %>%\n    filter(!is.na(pop)) %>%  # Remove NA cases\n    select(all_of(required_cols))\n  \n  # 3. Summarize with careful NA handling\n  base_pop_agg <- base_pop_clean %>%\n    group_by(age, sex, pa, sz) %>%\n    summarise(pop = sum(pop, na.rm = TRUE), .groups = \"drop\")\n  \n  # 4. Forecast for ages 59-88\n  next_pop <- base_pop_agg %>%\n    filter(between(age, 59, 88)) %>%\n    mutate(age = age + 1) %>%\n    left_join(\n      rates %>% select(age, sex, pa, sz, avg_rate), \n      by = c(\"age\", \"sex\", \"pa\", \"sz\")\n    ) %>%\n    mutate(\n      avg_rate = coalesce(avg_rate, median(rates$avg_rate, na.rm = TRUE)),\n      pop = pop * avg_rate\n    ) %>%\n    select(all_of(required_cols))\n  \n  # 5. Handle age 89+\n  pop_90 <- base_pop_agg %>%\n    filter(age >= 89) %>%\n    mutate(age = 90) %>%\n    left_join(\n      rates %>% filter(age == 90) %>% select(sex, pa, sz, avg_rate),\n      by = c(\"sex\", \"pa\", \"sz\")\n    ) %>%\n    mutate(\n      avg_rate = coalesce(avg_rate, median(rates$avg_rate[rates$age == 90], na.rm = TRUE)),\n      pop = pop * avg_rate\n    ) %>%\n    select(all_of(required_cols))\n  \n  # 6. Combine results\n  bind_rows(next_pop, pop_90) %>%\n    mutate(year = year) %>%\n    group_by(year, age, sex, pa, sz) %>%\n    summarise(pop = sum(pop, na.rm = TRUE), .groups = \"drop\")\n}\n\n#2nd code chunk\n# Run forecasting with error handling\nforecast_list <- list()\ncurrent_pop <- pop24 %>% \n  select(age, sex, pa, sz, pop) %>%\n  mutate(pop = as.numeric(pop))\n\nfor (y in 2025:2029) {\n  tryCatch({\n    forecast <- forecast_year(current_pop, avg_survival_rates, y)\n    forecast_list[[as.character(y)]] <- forecast\n    current_pop <- forecast %>% select(age, sex, pa, sz, pop)\n    message(\"Successfully forecasted year \", y)\n  }, error = function(e) {\n    message(\"Error forecasting year \", y, \": \", e$message)\n    # Debugging info:\n    message(\"Current population data structure:\")\n    print(str(current_pop))\n    message(\"Sample of problematic data:\")\n    print(head(current_pop[current_pop$pop != as.numeric(current_pop$pop), ]))\n  })\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Step 5: Loop over the years\n\nThis code creates an iterative population forecasting system that projects demographic changes from 2025 to 2029. An empty list called `forecast_list` is initialized to store the forecast results for each year. The variable `base_pop` is set to `pop24`, which contains the 2024 population data used as the starting point. The for loop iterates through years 2025 to 2029, calling the `forecast_year()` function for each year with the current base population, survival rates, and target year as inputs. Each forecast result is stored in `forecast_list` using the year as the key. After each forecast, `base_pop` is updated with the projected population data from the current year, selecting only the essential columns (pa, sz, age, sex, pop). This creates a sequential chain where each year's forecast becomes the input for the next year. This iterative approach captures cumulative demographic effects, as mortality and aging impacts from each year carry forward to subsequent projections. The final result is five separate population forecasts stored in `forecast_list`, representing projected demographics for each year from 2025-2029.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List to store forecasts\nforecast_list <- list()\nbase_pop <- pop24\n\nfor (y in 2025:2029) {\n  next_forecast <- forecast_year(base_pop, avg_survival_rates, y)\n  forecast_list[[as.character(y)]] <- next_forecast\n  base_pop <- next_forecast %>% select(pa, sz, age, sex,  pop)\n}\n```\n:::\n\n\n\n### Final Output of Population Forecast\n\nThis code combines all the individual yearly forecasts into a single comprehensive dataset and ensures population values are whole numbers. The `bind_rows(forecast_list)` function takes all the separate forecast datasets stored in the list (one for each year from 2025-2029) and stacks them vertically into one dataframe, preserving all columns and adding all rows together. The `mutate(pop = ceiling(pop))` applies the ceiling function to round all population values up to the nearest integer, since population counts must be whole numbers and any fractional people resulting from the survival rate calculations need to be converted to realistic integer values. The ceiling function always rounds upward, so a value like 1547.3 becomes 1548, ensuring no population is lost due to rounding and maintaining conservative population estimates. The result is a single dataset containing all forecasted population data across all years, with properly formatted integer population counts ready for analysis or visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_forecasts <- bind_rows(forecast_list) %>%\n  mutate(pop = ceiling(pop))  # Round UP to nearest integer\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert from long to wide format\npivoted_data <- all_forecasts %>%\n  select(year, age, sex, pa, sz, pop) %>%  # Ensure only necessary columns\n  pivot_wider(\n    names_from = year,\n    values_from = pop,\n    names_prefix = \"pop_\",  # Adds \"pop_\" before each year\n    values_fill = NA        # Fill missing combinations with NA\n  ) %>%\n  arrange(pa, sz, sex, age)  # Sort logically\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## MPSZ: Singapore's Master Plan 2019 Subzone Boundary\n\n### Overview\n\nUsing `st_read`, the ESRI shapefile was imported and it contains 323 data entries and 15 fields. Each of the data entry consists of a multi-polygon shape, with geospatial coordinates with a geographic coordinate system (GCS) of WGS84. The features of GCS include using a 3D spherical model of earth with coordinates of longitude, latitude and altitude whereas PCS uses a 2D plane model with linear measurements (i.e. metres).\n\nAs the data file is in KML version. However, the file doesn't churn the full details of the Master Plan Boundary. Therefore, the dataset was amended using QGIS and downloaded for this project.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/planningarea/\",\n               layer = \"mpsz2019\")\n```\n:::\n\n\n\nUsing `glimpse()`, we are able to visualise the columns, column types and properties within the columns. Notably, there are numerous columns that are not needed for this analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n:::\n\n\n\nIn the code chunk below, we use the `select()`function to pick the columns that are required for the anlaysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  select(SUBZONE_N, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(mpsz) +\n  tm_polygons(\"SUBZONE_N\")  # Horizontal legend\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"SUBZONE_N\"])\n```\n:::\n\n\n\n### Transforming CRS\n\nAs the research's focus is exploring the accessibility of care centres in Singapore, PCS would be appropriate in this context as it measures the distance between the elderly' residence and the care centre. Thus, in ensuring accurate measurement, the function \\`st_transform\\` with a crs of 3414 was used (Kam, 2022) in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n\n### Shared Boundaries\n\nThe below codechunk uses `st_is_valid` in assessing if there are shared boundaries in the `mpsz` data. This is important as shared boundaries can lead to inconsistent data impacting the research findings. 9 polygons with self-intersection ('Ring Self-Intersection') issues were returned.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_valid(mpsz, reason = TRUE)\n```\n:::\n\n\n\nThis code chunk visualises the boundaries that are affected such as the smaller islands outside of Singapore Main Island: P. Ubin, P. Tekong, Sentosa Island\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninvalid_polygons <- mpsz[!st_is_valid(mpsz),]\nplot(invalid_polygons)\n```\n:::\n\n\n\nIn addressing the above point, we will use st_buffer() of sf package to compute a 5-metres buffers around the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_buffer(mpsz, dist = 5)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Combining MPSZ & Population Forecast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create temporary cleaned versions for joining\nmpsz_clean <- mpsz %>%\n  mutate(join_key = str_trim(str_to_upper(SUBZONE_N)))\n\npivoted_clean <- pivoted_data %>%\n  mutate(join_key = str_trim(str_to_upper(sz)))\n\n# Join and clean up\nmpsz_popforecast <- mpsz_clean %>%\n  left_join(pivoted_clean, by = \"join_key\") %>%\n  select(-join_key)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### MPSZ Land Use\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_land = st_read(dsn = \"data/landuse/\",\n               layer = \"mp2019_landuse\") %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_valid(mpsz_land, reason = TRUE)\n```\n:::\n\n\n\nUsing `unique()`, it returns a list of properties in the column `LU_DESC`. As the focus of the research is accessibility to care centre, all residential aspects will be factored in this research.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mpsz_land$LU_DESC)\n```\n:::\n\n\n\nIn the code chunk below, we use the `select()`function to pick the columns that are required for the anlaysis. Additionally, `filter()` the column `LU_DESC` for those words containing 'residential' Regular expression was used alongside ignoring captital letters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_res <- mpsz_land %>%\n  select(LU_DESC, geometry) %>%\n  filter(str_detect(LU_DESC, regex(\"residential\", ignore_case = TRUE)))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Sampling Grid\n\nIn measuring spatial accessibility, analytical grids of the sampling fields is used to standardise the means of measurement (Kam, 2022). These analytical grids can be comprised of equilateral triangles, squares or hexagon due to its ability to tessellate (ESRI, 2025). From the code output below, we noticed that the sampling fields in the `mpsz_res` are not equal for measurement. Therefore, it is imperative to select an appropriate analytical grid in measuring spatial accessibility. Hexagons grids is chosen over triangles and squares due to several factors. Firstly, the shape of a hexagon has a low-perimeter-to-area ratio, hence the edge effect of the grid shape reduces sampling bias. Secondly, when comparing equal area, any point inside a hexagon is closer to the centriod than any given point in an equal-area square or triangle due to the more acute angles of square and triangle versus the hexagon (Burdziej, 2018; ESRI, 2025). This is particular important in this research as we are using the centroid as a proxy in comparing accessibility to the various care centres. The centre of each hexagon is an Origin, additionally, acting as a starting point in ascertaining the shortest distance to the care centres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntmap_options(check.and.fix = TRUE)\ntmap_options(max.categories = n_distinct(mpsz_res$LU_DESC))  # Show all categories\ntm_shape(mpsz_res) +\n  tm_polygons(\"LU_DESC\")\n```\n:::\n\n\n\nIn the HealthierSG White Paper 2022, the Ministry of Health has indicated its intention to \"expand the network \\[\"care centres\"\\] to 220 by 2025\". Furthermore, through the Ministry's estimation, 8 in 10 seniors will have a care centre in the vicinity of their homes (Ministry of Health, 2022). Hence, we will assume that the maximum distance to the care centres are 100 metres. Hence, in the code chunk below, `st_make_grid` from `sf` package constructed hexagonal grids encompassing the Singapore Master Plan 2019 Planning Subzone Boundary using `cellsize` that defines the radius of 100 metres and `square` to be false to generate a hexagonal grid.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_res <- st_make_grid(mpsz_res,\n                         cellsize = 100,\n                         what = \"polygon\",\n                         square = FALSE) %>%\n  st_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_res$hex_id <- sprintf(\"H%04d\", seq_len(nrow(hex_res))) %>% as.factor()\nhead(hex_res)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Visualing hex_grids & res\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set tmap mode and options\ntmap_mode(\"plot\")  # Use \"view\" for interactive map\ntmap_options(check.and.fix = TRUE)\ntmap_options(max.categories = n_distinct(mpsz_res$LU_DESC))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the base map with land use\nbase_map <- tm_shape(mpsz_res) +\n  tm_shape(hex_grid) +\n  tm_polygons(\"LU_DESC\",\n              palette = \"Set3\",\n              title = \"Land Use Type\",\n              alpha = 0.7,\n              border.col = \"gray30\",\n              lwd = 0.3) +\n  tm_layout(legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add hexagon grid overlay\nfinal_map <- base_map +\n  tm_shape(hex_grid) +\n  tm_borders(col = \"black\",\n             lwd = 0.5,\n             alpha = 0.5) +\n  tm_text(\"hex_id\",\n          size = 0.5,\n          col = \"black\",\n          alpha = 0.7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the map\nfinal_map\n```\n:::\n\n\n\n### Cross-checking subzones in MPSZ & Forecast data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_original_case <- mpsz %>%\n  distinct(SUBZONE_N) %>%\n  mutate(join_key = toupper(SUBZONE_N)) %>%\n  full_join(\n    all_forecasts %>%\n      distinct(sz) %>%\n      mutate(join_key = toupper(sz)),\n    by = \"join_key\"\n  ) %>%\n  select(SUBZONE_N, sz) %>%\n  arrange(SUBZONE_N, sz)\n```\n:::\n\n\n\n###Combining MPSZ & Population Forecast\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_forecast <- mpsz %>%\n  left_join(all_forecasts, by = c(\"SUBZONE_N\" = \"sz\"))\n```\n:::\n\n\n\n### Precursor\n\nThere two sf data layers, namely:\n\n-   hexagon: sf object of hexagonal polygons.\n-   mpsz: sf object of planning subzones. Beside other field, there is a field contains the target population called aged_pop.\n\n::: callout-note\nPlease ensure that both layers are in the same CRS (coordinate reference system, 3414 for svy21 ) and use projected units (e.g., meters).\n:::\n\n### Check and Transform CRS to Projected\n\nUse the code chunk below to check if the data layers are in svy21 projected coornates system.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(hex_centroids)\n```\n:::\n\n\n\nIf it is not projected, use the code chunk to transform the sf data layers into svy21.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon <- st_transform(hexagon, 3414) \nmpsz <- st_transform(psz, 3414)\n```\n:::\n\n\n\n### Calculate the Area of Each Subzone\n\nNext, the code below will compute the area of each polygon in mpsz.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  mutate(mpsz_area = st_area(geometry))\n```\n:::\n\n\n\n### Intersect Hexagons with Subzones\n\nThe code chunk below Creates new polygons where hexagons and subzones overlap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_mpsz_intersection <- st_intersection(hex_centroids, mpsz)\n```\n:::\n\n\n\n### Calculate Area of Each Intersection\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_mpsz_intersection <- hex_mpsz_intersection %>% \n  mutate(intersection_area =\n           st_area(geometry))\n```\n:::\n\n\n\n### Estimate Hexagon Population\n\nAssume uniform population density within each subzone. So, the hexagon’s share of the population is:\n\n![](images/areaproportion.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_mpsz_intersection <-\n  hex_psz_intersection %>%\n  mutate(hex_pop = as.numeric(\n    intersection_area / mpsz_area * \n      population))\n\n#to push population up\n```\n:::\n\n\n\n### Aggregate Estimated Population to Each Hexagon\n\nIf a hexagon overlaps multiple subzones, sum the estimated populations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_population <- \n  hex_mpsz_intersection %>%\n  group_by(hex_id = row_number()) %>% \n  summarise(estimated_population =\n              sum(hex_pop, na.rm = TRUE))\n```\n:::\n\n\n\n### Keeping original hexagon attributes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_final <- hexagon %>% \n  mutate(hex_id = row_number()) %>%\n  left_join(hexagon_population, \n            by = \"hex_id\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n*hexagon_final* now includes a new column *estimated_population*, which is the area-weighted population estimate for each hexagon.e\n\n## Combining Hex & population\n\n#i have this sf \"hex_res\" with columns geometry and hex_id and mpsz_popforecast with columns age, sex, pa, sz, pop_2025, pop_2026, pop_2027, pop_2028, pop_2029, geometry. i want the hex_res to be with base layer and mpsz_popforecast to be on top of it.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Care Centre\n\n### Overview\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- read_csv(\"data/carecentre/activeageingcentre.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncounselling <- read_csv(\"data/carecentre/counselling.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndaycare <- read_csv(\"data/carecentre/daycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndementia <- read_csv(\"data/carecentre/dementiadaycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhospice <- read_csv(\"data/carecentre/dayhospice.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmaintenance <- read_csv(\"data/carecentre/maintenancedaycare.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnhrespite <- read_csv(\"data/carecentre/nhrespite.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnursing <- read_csv(\"data/carecentre/centrebasednursing.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrehab <- read_csv(\"data/carecentre/communityrehabcentre.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Cursory View\n\nUsing the glimpse() function, we are able to see that various rows in each data set while sharing the same number of columns. Columns \"web-scraper-order\" and \"web-scraper-start-url\" are redundant, thus, will be removed. Additionally, the address includes the postal code and it will seperated from the main street name and block number to facilitate the geospatial mapping thereafter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(aac)\n```\n:::\n\n\n\n### Deleting Unwanted Codes\n\nThe following R code is used to remove the columns \"web-scraper-order\" and \"web-scraper-start-url\" from multiple datasets: The select() function from the dplyr package is used to select or remove columns from a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- aac %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ncounselling <- counselling %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ndaycare <- daycare %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\ndementia <- dementia %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nhospice <- hospice %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nmaintenance <- maintenance %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nnhrespite <- nhrespite %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nnursing <- nursing %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\nrehab <- rehab %>% select(-\"web-scraper-order\", -\"web-scraper-start-url\")\n```\n:::\n\n\n\nAfter removing the two columns, each data set has two columns, namely name and address only.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(aac)\n```\n:::\n\n\n\n### Checking for Missing Values\n\nTo check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.\n\nThe is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for missing or null values in 'name' and 'address' columns\naac_missing <- aac %>% summarise(across(c(name, address), ~sum(is.na(.))))\ncounselling_missing <- counselling %>% summarise(across(c(name, address), ~sum(is.na(.))))\ndaycare_missing <- daycare %>% summarise(across(c(name, address), ~sum(is.na(.))))\ndementia_missing <- dementia %>% summarise(across(c(name, address), ~sum(is.na(.))))\nhospice_missing <- hospice %>% summarise(across(c(name, address), ~sum(is.na(.))))\nmaintenance_missing <- maintenance %>% summarise(across(c(name, address), ~sum(is.na(.))))\nnhrespite_missing <- nhrespite %>% summarise(across(c(name, address), ~sum(is.na(.))))\nnursing_missing <- nursing %>% summarise(across(c(name, address), ~sum(is.na(.))))\nrehab_missing <- rehab %>% summarise(across(c(name, address), ~sum(is.na(.))))\n```\n:::\n\n\n\n### Duplicate Check\n\nThe code provided checks for duplicate rows in each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \\> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \\> 1) keeps only the rows that appear more than once (i.e., duplicates).\n\nFor each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.\n\nThus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates in 'aac'\naac_duplicate <- aac %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'counselling'\ncounselling_duplicate <- counselling %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'daycare'\ndaycare_duplicate <- daycare %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'dementia'\ndementia_duplicate <- dementia %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'hospice'\nhospice_duplicate <- hospice %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'maintenance'\nmaintenance_duplicate <- maintenance %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'nhrespite'\nnhrespite_duplicate <- nhrespite %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'nursing'\nnursing_duplicate <- nursing %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n\n# Check for duplicates in 'rehab'\nrehab_duplicate <- rehab %>% \n  group_by_all() %>% \n  filter(n() > 1) %>% \n  ungroup()\n```\n:::\n\n\n\n### Separating postal code from address\n\nThe code uses the mutate() function to extract the postal code (last 6 digits) from the address column of the individual dataset and store it in a new column called postal_code. The postal code is then removed from the address column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Active Ageing Centre\naac <-mutate(aac,\n    postal_code = str_extract(address, \"[0-9]{6}$\"),  # Extract postal code\n    address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")  # Remove postal code from address\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counselling\ncounselling <- mutate(counselling,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daycare\ndaycare <- mutate(daycare,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dementia\ndementia <- mutate(dementia,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Day Hospice\nhospice <- mutate(hospice,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Maintenance Daycare\nmaintenance <- mutate(maintenance,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# NH Respite\nnhrespite <- mutate(nhrespite,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Centre Based Nursing\nnursing <- mutate(nursing,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Community Rehab Centre\nrehab <- mutate(rehab,\n  postal_code = str_extract(address, \"[0-9]{6}$\"),\n  address = str_remove(address, \"[,]?\\\\s*[0-9]{6}$\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for missing or null values in 'name' and 'address' columns\naac_missing <- aac %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ncounselling_missing <- counselling %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ndaycare_missing <- daycare %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\ndementia_missing <- dementia %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nhospice_missing <- hospice %>% summarise(across(c(name, address, postal_code),~sum(is.na(.))))\nmaintenance_missing <- maintenance %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nnhrespite_missing <- nhrespite %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nnursing_missing <- nursing %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\nrehab_missing <- rehab %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))\n```\n:::\n\n\n\n### Labelling Dataset\n\nThe below code chunk adds a column and naming it as \"label\" in relation to the name of the dataset hence we are able to identify the type of services provided by the care centres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naac <- aac %>%\n  mutate(label = \"aac\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncounselling <- counselling %>%\n  mutate(label = \"counselling\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndaycare <- daycare %>%\n  mutate(label = \"daycare\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndementia <- dementia %>%\n  mutate(label = \"dementia\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhospice <- hospice %>%\n  mutate(label = \"hospice\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmaintenance <- maintenance %>%\n  mutate(label = \"maintenance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnhrespite <- nhrespite %>%\n  mutate(label = \"nhrespite\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnursing <- nursing %>%\n  mutate(label = \"nursing\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrehab <- rehab %>%\n  mutate(label = \"rehab\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Append all Care Centres into one dataset\n\nThe code combines multiple datasets (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) into a single dataset named c_data using the bind_rows() function. This function appends the rows of each dataset, stacking them vertically, to create one consolidated dataset. The resulting c_data will contain all the rows from the individual datasets, assuming they have the same column structure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_data <- bind_rows(\n  aac, \n  counselling,\n  daycare,\n  dementia,\n  hospice,\n  maintenance,\n  nhrespite,\n  nursing,\n  rehab,\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Transforming Categorical Data to Binary Indicator\n\nThis code transforms the dataset `cc_data` from a long format to a wide format by pivoting on the categorical values in the `label` column, effectively converting them into binary indicator columns. The process begins by removing the `address` column using `select(-address)` to exclude it from the transformation. Next, a new column called `present` is created using `mutate(present = 1)`, where every row is assigned a value of 1 to indicate the presence of a label. The key reshaping operation is performed using `pivot_wider()`, which spreads the unique values from the `label` column into separate columns. The `names_from = label` argument specifies that the new column names should be derived from the distinct categories in `label`, while `values_from = present` fills these new columns with the corresponding 1s from the `present` column. Any missing combinations (where a particular label does not appear for a given record) are automatically filled with 0s due to the `values_fill = list(0)` argument. The final output, stored in `pivoted_cc_data`, is a wider dataframe where each original row now has binary flags (1 or 0) indicating the presence or absence of each label category, making it suitable for analyses that require a one-hot encoded or dummy variable representation of categorical data.\n\ncorrect code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_cc_data <- cc_data %>%\n  select(-address) %>%\n\n  mutate(present = 1) %>%  # Create a column to indicate presence (1)\n\n  pivot_wider(\n\n    names_from = label,    # Pivot based on the 'label' column\n\n    values_from = present,\n    values_fill = list(0)# Use the 'present' column for the values\n    \n  )\n```\n:::\n\n\n\nusing arrange(0, we are able to see that that the centres are arranged in alphabetically order and they are similar ones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(pivoted_cc_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_cc_data$name[duplicated(pivoted_cc_data$name)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate_rows <- pivoted_cc_data %>%\n  # Count occurrences of each name\n  add_count(name) %>%\n  # Filter for names that appear more than once\n  filter(n > 1) %>%\n  # Remove the count column\n  select(-n) %>%\n  # Arrange by name for better readability\n  arrange(name)\n\nif (nrow(duplicate_rows) > 0) {\n  print(duplicate_rows)\n} else {\n  message(\"No duplicates found in the 'name' column.\")\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### Adding coordinates to care centre\n\nThis code prepares a list of unique postal codes from a dataset called `pivoted_cc_data` to be used for geocoding via an API. The line first extracts the `postal_code` column from the dataframe, then applies `unique()` to eliminate duplicate postal codes - this optimization reduces the number of API calls needed since the same postal code will return the same coordinates. The `sort()` function then arranges these unique postal codes in ascending order, which serves two purposes: it makes the list more organized for human review (easier to locate specific codes during debugging or verification), and it may help with processing efficiency when matching the geocoded results back to the original dataset. The resulting sorted unique list is stored in `add_list`, which can then be passed to a geocoding API (like the OneMap API in Singapore) that typically accepts individual addresses or postal codes rather than entire dataframes. This preprocessing step is crucial because APIs often have rate limits or usage constraints, so minimizing duplicate requests helps maximize efficiency and reduce potential errors or bottlenecks in the geocoding process. The comment \"parse a list as API cannot read df\" explicitly notes that this conversion from dataframe column to simple list is necessary because the target API expects individual values rather than dataframe structures as input.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(pivoted_cc_data$postal_code)) #parse a list as API cannot read df\n#unique reduces records to pass to portal\n#sort is used to easier to find geo codes\n```\n:::\n\n\n\nThe below codechunk defines a function called get_coords that takes a list of Singapore postal codes as input and retrieves their geographic coordinates from the OneMap API (a Singapore government mapping service). The function first initializes an empty data frame to store the results. For each postal code in the input list, it makes an HTTP GET request to the OneMap API, which returns the location data in JSON format. The function then processes the response differently depending on how many matches are found: if there's exactly one match, it extracts those coordinates; if there are multiple matches, it looks for an exact postal code match; and if no matches are found, it records NA values. The valid coordinates (in WGS84 latitude/longitude format) are converted into an sf (simple features) spatial object, which is then transformed to Singapore's SVY21 projected coordinate system (EPSG:3414). The function extracts these SVY21 coordinates and merges them back into the original data frame, preserving any rows that had invalid or missing coordinates. The final output is a data frame containing the original postal codes, any matching postal codes found, WGS84 coordinates, SVY21 coordinates, and the geometric data as an sf geometry column. This function is particularly useful for geocoding Singapore addresses and preparing spatial data for analysis with Singapore-specific geographic information systems.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(postal_list){\n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (postal in postal_list){\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=postal,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each postal code\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal_code <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(postal_code = postal, \n                           postal_found = postal_code, \n                           latitude_wgs84 = lat,\n                           longitude_wgs84 = lng)\n    }\n    \n    # If multiple results, use the exact postal code match\n    else if (found > 1){\n      # Find exact match for postal code\n      res_match <- res[res$POSTAL == postal, ]\n      \n      # If exact match found, use it\n      if (nrow(res_match) > 0) {\n        postal_code <- res_match$POSTAL[1]\n        lat <- res_match$LATITUDE[1]\n        lng <- res_match$LONGITUDE[1]\n        new_row <- data.frame(postal_code = postal,\n                             postal_found = postal_code,\n                             latitude_wgs84 = lat,\n                             longitude_wgs84 = lng)\n      }\n      # If no exact match, set as NA\n      else {\n        new_row <- data.frame(postal_code = postal,\n                             postal_found = NA,\n                             latitude_wgs84 = NA,\n                             longitude_wgs84 = NA)\n      }\n    }\n    # If no results found\n    else {\n      new_row <- data.frame(postal_code = postal,\n                           postal_found = NA,\n                           latitude_wgs84 = NA,\n                           longitude_wgs84 = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  \n  # Convert to sf object with WGS84 coordinates (EPSG:4326)\n  # Filter out rows with NA coordinates first\n  valid_coords <- postal_coords[!is.na(postal_coords$latitude_wgs84) & \n                              !is.na(postal_coords$longitude_wgs84), ]\n  \n  if(nrow(valid_coords) > 0) {\n    coords_sf <- st_as_sf(valid_coords, \n                         coords = c(\"longitude_wgs84\", \"latitude_wgs84\"),\n                         crs = 4326)\n    \n    # Transform to SVY21 (EPSG:3414)\n    coords_svy21 <- st_transform(coords_sf, 3414)\n    \n    # Extract coordinates\n    coords_matrix <- st_coordinates(coords_svy21)\n    \n    # Add SVY21 coordinates back to the original dataframe\n    valid_coords$longitude <- coords_matrix[, 1]  # SVY21 X coordinate\n    valid_coords$latitude <- coords_matrix[, 2]   # SVY21 Y coordinate\n\n    \n    # Merge back with rows that had NA coordinates\n    result <- merge(postal_coords, \n                   valid_coords[c(\"postal_code\", \"longitude\", \"latitude\")], \n                   by = \"postal_code\", all.x = TRUE)\n  } else {\n    # If no valid coordinates, add empty SVY21 columns\n    result <- postal_coords\n    result$longitude <- NA\n    result$latitude <- NA\n  }\n  \n  return(result)\n}\n```\n:::\n\n\n\nThe code `coords <- get_coords(add_list)` calls the previously defined `get_coords()` function to geocode (convert to geographic coordinates) a list of Singapore postal codes stored in `add_list`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n\n\nThe below code chunk merges the original dataset (`pivoted_cc_data`) with the geocoded coordinates (`coords`) using a left join operation, which preserves all records from the primary dataset while matching and appending geographic data where available using the properties of `postal_code` in both dataframes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_data_final <- pivoted_cc_data %>%\n  left_join(coords, \n            join_by(postal_code == postal_code)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_sf <- st_as_sf(cc_data_final,\n                  coords = c(\"longitude\", \"latitude\"), #c is use column\n                         crs = 3414)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_land_fixed <- st_make_valid(mpsz_land)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(mpsz_land_fixed) +\n  tm_polygons()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(cc_sf) +\n  tm_dots() #change to name\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(cc_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n:::\n\n\n\n# Exploratory Data Analysis\n\n## Population\n\n### EDA of Population Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Step 1: Define a function to filter and aggregate age distribution data\nget_age_distribution <- function(data, min_age = 60, max_age = 90) {\n  data %>%\n    filter(age >= min_age & age <= max_age) %>%\n    group_by(time, age, sex) %>%\n    summarise(total_pop = sum(pop), .groups = \"drop\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Step 2: Use the function to process data\nage_dist <- get_age_distribution(popdata20_c)  # Default: ages 60-90\n\n### Step 3: Plot age distributions by year and sex\nplot_age_distribution <- function(age_data) {\n  ggplot(age_data, aes(x = age, y = total_pop, fill = sex)) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    facet_wrap(~time, scales = \"free_y\") +\n    labs(\n      title = \"Age Distribution (60-90 Years) by Sex and Year\",\n      x = \"Age\",\n      y = \"Total Population\",\n      fill = \"Sex\"\n    ) +\n    scale_x_continuous(breaks = seq(60, 90, by = 5)) +\n    theme_minimal() +\n    theme(legend.position = \"bottom\")\n}\n\n# Generate the plot\nplot_age_distribution(age_dist)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nIn generating the population pyramid, the below oko\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load data\nget_age_distribution <- function(data, min_age = 60, max_age = 90) {\n  data %>%\n    filter(age >= min_age & age <= max_age) %>%\n    mutate(\n      # Standardize sex labels to match your data\n      sex = factor(sex, levels = c(\"Males\", \"Females\"))\n    ) %>%\n    group_by(time, age, sex) %>%\n    summarise(total_pop = sum(pop), .groups = \"drop\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#2020\nage_dist <- get_age_distribution(popdata20_c)\n# 3. Create population pyramid plot function \nplot_population_pyramid <- function(age_data, plot_year = max(age_data$time)) {\n  # Filter and transform data\n  plot_data <- age_data %>% \n    filter(time == plot_year) %>%\n    mutate(total_pop = ifelse(sex == \"Males\", -total_pop, total_pop))\n  \n  # Calculate axis limits\n  max_pop <- max(abs(plot_data$total_pop))\n  \n  ggplot(plot_data, aes(x = age, y = total_pop, fill = sex)) +\n    geom_bar(stat = \"identity\", width = 0.8) +\n    geom_hline(yintercept = 0, color = \"black\") +\n    coord_flip() +\n    scale_y_continuous(\n      labels = function(x) comma(abs(x)),\n      breaks = pretty_breaks(n = 6),\n      limits = c(-max_pop * 1.1, max_pop * 1.1)\n    ) +\n    scale_fill_manual(\n      values = c(\"Males\" = \"#3498db\", \"Females\" = \"#e74c3c\"),\n      labels = c(\"Males\" = \"Male\", \"Females\" = \"Female\") # Optional: display cleaner labels\n    ) +\n    labs(\n      title = paste(\"Population Pyramid of Age 60 & Above -\", plot_year),\n      x = \"Age\",\n      y = \"Population Count\",\n      fill = \"Gender\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\"),\n      legend.position = \"bottom\"\n    )\n}\n\n# 4. Generate and save the plot ------------------------------------------------\nfinal_plot <- plot_population_pyramid(age_dist)\nprint(final_plot)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n![Figure x: Population Pyramid 2020](/metho_images/2020.png) ![Figure x: Population Pyramid 2021](/metho_images/2021.png) ![Figure x: Population Pyramid 2022](/metho_images/2022.png) ![Figure x: Population Pyramid 2023](/metho_images/2023.png) ![Figure x: Population Pyramid 2024](/metho_images/2024.png) \\### Survival Analysis from 2025 - 2030\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmpa_mode(\"view\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n:::\n\n\n\n## Density of Care Centre in Each Subzone\n\nrefer chapt 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`CC Count` <- lengths(st_intersects(mpsz, ))\n```\n:::\n\n\n\n# References\n\nBurdziej, J. (2019). Using hexagonal grids and network analysis for spatial accessibility assessment in urban environments-A case study of public amenities in Toruń. Miscellanea Geographica. Regional Studies on Development, 23(2), 99-110.\n\nESRI. (2025). Why hexagons?. Retrieved on May, 2025 from https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-whyhexagons.htm\n\nKam, T. S. (2024). R for Geospatial Data Science and Analytics. Retrieved on April 2, 2, 2025 from https://r4gdsa.netlify.app/\n\nKam, T. S. (2022). GIS for Urban PlanningL QGIS methods. Retrieved on May 2, 2025 from https://gis4urbplan.netlify.app/\n\nTan, K. (2023). Take-home Exercise 1: Geospatial Analytics for Public Good. Retrieved from <https://isss624-kytjy.netlify.app/take-home_ex/take-home_ex1/the1#background>\n\nMinistry of Health Singapore. (2022). Healthier SG White Paper. Retrieved from https://file.go.gov.sg/healthiersg-whitepaper-pdf.pdf\n\nUrban Redevelopment Authority. (2023). Master Plan 2019 Planning Area Boundary (No Sea) (2024) \\[Dataset\\]. data.gov.sg. Retrieved February 23, 2025 from https://data.gov.sg/datasets/d_6c6d7361dd826d97b91bac914ca6b2ac/view\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}