---
title: "Data Preview"
date: "21st Feb, 2025"
date-modified: "last-modified"
format:
  html:
    code-fold: false
    code-summary: "Code Chunk"
    number-sections: true
execute: 
  eval: false #r will run through all codes
  echo: true #r will display all code chunk
  warning: false #for mark down
  freeze: true #r will not render all existing  html files
  message: false #avoid printing warning message
editor: source
---

# Overview

In this section, the methodology will be explained thereafter Exploratory Data Analysis will be done.

# Data Acquisition

3 main spectrum of data will be required for this research, namely the Population Data, Master Plan 2019 Subzone boundary and Care Centres.

![Figure x: Data Overview](/methodology/images/data_overview.png){fig-align="center"}

### WebScraping of Care Centres

Due to the lack of a centralised data of all care centres, web scarping is warranted in obtaining the information of the care centres. The geographical locations of the Care Centres alongside the centre names such as Active Ageing Centre, Day Care, Community Rehabilitation Centre, Centre-based Nursing were extracted using a web scraping tool, Web Scraper, available in Chrome web store as Seen in Figure x. As there is no centralised file that consist of the centre names and their locations, the location of each centre has to be manually extracted from the [Care Services](https://www.aic.sg/care-services/) webpage of the Agency of Integrated Care as seen in Figure x.

#### Step 0: Download Web Scraper from Chrome web store

Web Scraper is used as it is free, works reasonably well and available in both Chrome and Firefox web store. In the below steps, Chrome will be the default web browser used.

![*Figure x: Web Scraper*](/methodology/images/step0.png)

#### Step 1: Navigate to Developer Tools in Chrome Web Browser

After downloading the extension from Chrome Web Store, press onto the menu bar at the right of the browser and locate Developer Tools while onto the website you would like to scrape information from.

![*Figure x: Web Scraper*](/methodology/images/step1.png)

#### Step 2: Interface for Webscraper

After clicking onto Developer Tools, click onto the Web Scraper in the menu bar (in black). Following which the below interface will appear.

[![](/methodology/images/step2.png){width="499"}](Figure%20x:%20Locate%20Developer%20Tools)

#### Step 3: Create New Sitemap

Click onto "create new sitemap", thereafter "Create Sitemap". Sitemap Name will be the overarching term used for these information; in this instance, it will be AAC. The Start URL will be the HTML link that you would like the information to be scraped from.

![Figure x:](/methodology/images/step3.png){fig-align="center"}

#### Step 4: Add New Selector

After creating a new sitemap, the following interface will appear. Click onto the "Add new selector" to select the information to scrape.

![Figure x:](/methodology/images/step4.png){fig-align="center"}

#### Step 5: Selecting Whole Box

Firstly, the id will be the column name. For Type, select Element Attribute from the drop down selection. Thereafter, press on Select under Selector and select two boxes of each centre as seen in the figure below (the remaining boxes will be highlighted through its intelligent function) and press onto Done Selecting in the green box.

![Figure x:](/methodology/images/step5.png){fig-align="center"}

#### Step 6: Sitemap Interface

After adding a new selector, the sitemap page will appear the selector that you've inputted.

![Figure x: Step 6 - Create New Sitemap](/methodology/images/step6.png){fig-align="center"}

#### Step 7: Selecting Name of Care Centre

Firstly, the id will be name (with reference to the name of care centre), serving as the column name. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 names of the care centres (The remaining care centres will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple names and root parent selector will be root and press onto Save Selector.

![Figure x: Step 7 - Selecting Name of Care Centre](/methodology/images/step7.png){fig-align="center"}

#### Step 8: Create New Sitemap

A popup window will be prompted and Group selectors was selected.

![Figure x: Step 8 - Create New Sitemap](/methodology/images/step8.png){fig-align="center"}

#### Step 9: Selecting Address of Care Centre

Similar to Step 7, the id will be address. Text will be chosen under Type thereafter press Select under Selector and highlight the first 2 addresses of the care centres (Remaining addresses will be highlighted through its intelligent function) and press onto Done selecting in the green box. Multiple box will be selected as we would like to scrap multiple addresses and parent selector will be wrapper_for_main_name (as we grouped selectors in step 8) and press onto Save Selector.

![Figure x: Step 9 - Selecting Address of Care Centre](/methodology/images/step9.png){fig-align="center"}

#### Step 10: Data Preview

Prior to data scraping, the data is previewed in ensuring each name of the care centre is correctly tagged to the address using the main website to verify.

![Figure x: Step 10 - Data Preview](/methodology/images/step10.png){fig-align="center"}

#### Step 11: Commence Scraping

Head over to sitemap aac and click onto Scrape. A new browser will appear indicating that it is in process of scraping. It will be closed automatically once the process has ended.

![Figure x: Step 11 - Commence Scraping](/methodology/images/step11.png){fig-align="center"}

#### Step 11: Export Data

Export data is selected upon clicking sitemap aac. 2 file options are offered: csv and xlsx. The former was chosen as CSV files are simple and portable which doesn't complicate data processing. Thereafter the data will be downloaded.

![Figure x:](/methodology/images/step12.png){fig-align="center"}

#### Step 11: View CSV File

In ensuring the web scraping successful and accurate, the csv. file is opened and viewed.

![Figure x: Step 11 - View CSV File](/methodology/images/step13.png){fig-align="center"}

The above steps were repeated for each care centre. All of the Care Centre data was extracted on 7th February 2025.

## Packages

::: panel-tabset
The following packages are required for this section:

| Package | Description |
|-------------------------------------|-----------------------------------|
| [**sf**](https://r-spatial.github.io/sf/) | For importing, managing, and handling geospatial data |
| [**sfdep**](https://sfdep.josiahparry.com/) | Used to compute spatial weights, global and local spatial autocorrelation statistics |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) | For thematic mapping |
| [**tidyverse**](https://www.tidyverse.org/) | For non-spatial data wrangling that includes dplyr, tibble, ggplot2, readr, tidyr, stringr, forcats, lubridate and purr |
| [**knitr**](https://cran.r-project.org/web/packages/knitr/index.html) | For dynamic report generation |
| [**patchwork**](https://patchwork.data-imaginist.com/) | For plot manipulation |
| [**leaflet**](https://rstudio.github.io/leaflet/) | For interactive maps |
| [**scales**](https://scales.r-lib.org/) | For scaling graphs |

## Code

The code chunk below, using `p_load` function of the [**pacman**](https://cran.r-project.org/web/packages/pacman/pacman.pdf) package, ensures that packages required are installed and loaded in R.

```{r}
pacman::p_load(tidyverse, sf, httr,
               jsonlite, rvest, dplyr, units,
               lubridate, tmap)

# -   Creates a package list containing the necessary R packages
# -   Checks if the R packages in the package list have been installed
# -   If not installed, will install the missing packages & launch into R environment.
```
:::

## Geospatial Data

### Importing Singapore's Master Plan 2019 Subzone Boundary

```{r}
mpsz = st_read(dsn = "data/subzone/",
               layer = "MP14_SUBZONE_NO_SEA_PL")
```

```{r}
#| echo: false
#| eval: false
mppa <- st_read("data/planningarea/MasterPlan2019PlanningAreaBoundaryNoSea.kml")
```

```{r}
#| echo: false
#| eval: false
write_rds(mpsz, "data/rds/geopatial/mpsz.rds")
```

```{r}
#| echo: false
#| eval: false
mpsz = read_rds("data/rds/geopatial/mpsz.rds")
```

## Care Centre (EXTRACT TRANSFORM LOAD)

```{r}
aac <- read_csv("data/carecentre/activeageingcentre.csv")
```

```{r}
counselling <- read_csv("data/carecentre/counselling.csv")
```

```{r}
daycare <- read_csv("data/carecentre/daycare.csv")
```

```{r}
dementia <- read_csv("data/carecentre/dementiadaycare.csv")
```

```{r}
hospice <- read_csv("data/carecentre/dayhospice.csv")
```

```{r}
maintenance <- read_csv("data/carecentre/maintenancedaycare.csv")
```

```{r}
nhrespite <- read_csv("data/carecentre/nhrespite.csv")
```

```{r}
nursing <- read_csv("data/carecentre/centrebasednursing.csv")
```

```{r}
rehab <- read_csv("data/carecentre/communityrehabcentre.csv")
```

```{r}
#| echo: false
#| eval: false
write_rds(aac, "data/rds/carecentre/original/aac.rds")
write_rds(counselling, "data/rds/carecentre/original/counselling.rds")
write_rds(daycare, "data/rds/carecentre/original/daycare.rds")
write_rds(dementia, "data/rds/carecentre/original/dementia.rds")
write_rds(hospice, "data/rds/carecentre/original/hospice.rds")
write_rds(maintenance, "data/rds/carecentre/original/maintenance.rds")
write_rds(nhrespite, "data/rds/carecentre/original/nhrespite.rds")
write_rds(nursing, "data/rds/carecentre/original/nursing.rds")
write_rds(rehab, "data/rds/carecentre/original/rehab.rds")
```

```{r}
#| echo: false
#| eval: false

aac = read_rds("data/rds/carecentre/original/aac.rds")
counselling = read_rds("data/rds/carecentre/original/counselling.rds")
daycare = read_rds("data/rds/carecentre/original/daycare.rds")
dementia = read_rds("data/rds/carecentre/original/dementia.rds")
hospice = read_rds("data/rds/carecentre/original/hospice.rds")
maintenance = read_rds("data/rds/carecentre/original/maintenance.rds")
nhrespite = read_rds("data/rds/carecentre/original/nhrespite.rds")
nursing = read_rds("data/rds/carecentre/original/nursing.rds")
rehab = read_rds("data/rds/carecentre/original/rehab.rds")
```

### Cursory View

Using the glimpse() function, we are able to see that various rows in each data set while sharing the same number of columns. Columns "web-scraper-order" and "web-scraper-start-url" are redundant, thus, will be removed. Additionally, the address includes the postal code and it will seperated from the main street name and block number to facilitate the geospatial mapping thereafter.

```{r}
glimpse(popdata20)
```

### Deleting Unwanted Codes

The following R code is used to remove the columns "web-scraper-order" and "web-scraper-start-url" from multiple datasets: The select() function from the dplyr package is used to select or remove columns from a data frame.

```{r}
aac <- aac %>% select(-"web-scraper-order", -"web-scraper-start-url")
counselling <- counselling %>% select(-"web-scraper-order", -"web-scraper-start-url")
daycare <- daycare %>% select(-"web-scraper-order", -"web-scraper-start-url")
dementia <- dementia %>% select(-"web-scraper-order", -"web-scraper-start-url")
hospice <- hospice %>% select(-"web-scraper-order", -"web-scraper-start-url")
maintenance <- maintenance %>% select(-"web-scraper-order", -"web-scraper-start-url")
nhrespite <- nhrespite %>% select(-"web-scraper-order", -"web-scraper-start-url")
nursing <- nursing %>% select(-"web-scraper-order", -"web-scraper-start-url")
rehab <- rehab %>% select(-"web-scraper-order", -"web-scraper-start-url")
```

After removing the two columns, each data set has two columns, namely name and address only.

```{r}
glimpse(aac)
```

### Checking for Missing Values

To check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.

The is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.

```{r}
# Checking for missing or null values in 'name' and 'address' columns
aac_missing <- aac %>% summarise(across(c(name, address), ~sum(is.na(.))))
counselling_missing <- counselling %>% summarise(across(c(name, address), ~sum(is.na(.))))
daycare_missing <- daycare %>% summarise(across(c(name, address), ~sum(is.na(.))))
dementia_missing <- dementia %>% summarise(across(c(name, address), ~sum(is.na(.))))
hospice_missing <- hospice %>% summarise(across(c(name, address), ~sum(is.na(.))))
maintenance_missing <- maintenance %>% summarise(across(c(name, address), ~sum(is.na(.))))
nhrespite_missing <- nhrespite %>% summarise(across(c(name, address), ~sum(is.na(.))))
nursing_missing <- nursing %>% summarise(across(c(name, address), ~sum(is.na(.))))
rehab_missing <- rehab %>% summarise(across(c(name, address), ~sum(is.na(.))))

```

### Duplicate Check

The code provided checks for duplicate rows in each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \> 1) keeps only the rows that appear more than once (i.e., duplicates).

For each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.

Thus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.

```{r}
# Check for duplicates in 'aac'
aac_duplicate <- aac %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'counselling'
counselling_duplicate <- counselling %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'daycare'
daycare_duplicate <- daycare %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'dementia'
dementia_duplicate <- dementia %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'hospice'
hospice_duplicate <- hospice %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'maintenance'
maintenance_duplicate <- maintenance %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'nhrespite'
nhrespite_duplicate <- nhrespite %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'nursing'
nursing_duplicate <- nursing %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

# Check for duplicates in 'rehab'
rehab_duplicate <- rehab %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()

```

## Data Manipulation (CC)

### Seperating postal code from address

The code uses the mutate() function to extract the postal code (last 6 digits) from the address column of the individual dataset and store it in a new column called postal_code. The postal code is then removed from the address column.

```{r}
# Active Ageing Centre
aac <-mutate(aac,
    postal_code = str_extract(address, "[0-9]{6}$"),  # Extract postal code
    address = str_remove(address, "[,]?\\s*[0-9]{6}$")  # Remove postal code from address
  )
```

```{r}
# Counselling
counselling <- mutate(counselling,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Daycare
daycare <- mutate(daycare,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Dementia
dementia <- mutate(dementia,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Day Hospice
hospice <- mutate(hospice,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Maintenance Daycare
maintenance <- mutate(maintenance,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# NH Respite
nhrespite <- mutate(nhrespite,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Centre Based Nursing
nursing <- mutate(nursing,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Community Rehab Centre
rehab <- mutate(rehab,
  postal_code = str_extract(address, "[0-9]{6}$"),
  address = str_remove(address, "[,]?\\s*[0-9]{6}$")
)
```

```{r}
# Checking for missing or null values in 'name' and 'address' columns
aac_missing <- aac %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
counselling_missing <- counselling %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
daycare_missing <- daycare %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
dementia_missing <- dementia %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
hospice_missing <- hospice %>% summarise(across(c(name, address, postal_code),~sum(is.na(.))))
maintenance_missing <- maintenance %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
nhrespite_missing <- nhrespite %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
nursing_missing <- nursing %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
rehab_missing <- rehab %>% summarise(across(c(name, address, postal_code), ~sum(is.na(.))))
```

### Labelling each dataset appropriately

The below code chunk adds a column and naming it as "label" in relation to the name of the dataset. This is done so we are able to combine the dataset together and identify

```{r}
aac <- aac %>%
  mutate(label = "aac")
```

```{r}
counselling <- counselling %>%
  mutate(label = "counselling")
```

```{r}
daycare <- daycare %>%
  mutate(label = "daycare")
```

```{r}
dementia <- dementia %>%
  mutate(label = "dementia")
```

```{r}
hospice <- hospice %>%
  mutate(label = "hospice")
```

```{r}
maintenance <- maintenance %>%
  mutate(label = "maintenance")
```

```{r}
nhrespite <- nhrespite %>%
  mutate(label = "nhrespite")
```

```{r}
nursing <- nursing %>%
  mutate(label = "nursing")
```

```{r}
rehab <- rehab %>%
  mutate(label = "rehab")
```

```{r}
#| echo: false
#| eval: false
write_rds(aac, "data/rds/carecentre/refined/aac.rds")
write_rds(counselling, "data/rds/carecentre/refined/counselling.rds")
write_rds(daycare, "data/rds/carecentre/refined/daycare.rds")
write_rds(dementia, "data/rds/carecentre/refined/dementia.rds")
write_rds(hospice, "data/rds/carecentre/refined/hospice.rds")
write_rds(maintenance, "data/rds/carecentre/refined/maintenance.rds")
write_rds(nhrespite, "data/rds/carecentre/refined/nhrespite.rds")
write_rds(nursing, "data/rds/carecentre/refined/nursing.rds")
write_rds(rehab, "data/rds/carecentre/refined/rehab.rds")
```

```{r}
#| echo: false
#| eval: false

aac = read_rds("data/rds/carecentre/refined/aac.rds")
counselling = read_rds("data/rds/carecentre/refined/counselling.rds")
daycare = read_rds("data/rds/carecentre/refined/daycare.rds")
dementia = read_rds("data/rds/carecentre/refined/dementia.rds")
hospice = read_rds("data/rds/carecentre/refined/hospice.rds")
maintenance = read_rds("data/rds/carecentre/refined/maintenance.rds")
nhrespite = read_rds("data/rds/carecentre/refined/nhrespite.rds")
nursing = read_rds("data/rds/carecentre/refined/nursing.rds")
rehab = read_rds("data/rds/carecentre/refined/rehab.rds")
```

### Append all Care Centres into one dataset

The code combines multiple datasets (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab) into a single dataset named c_data using the bind_rows() function. This function appends the rows of each dataset, stacking them vertically, to create one consolidated dataset. The resulting c_data will contain all the rows from the individual datasets, assuming they have the same column structure.

```{r}
cc_data <- bind_rows(
  aac, 
  counselling,
  daycare,
  dementia,
  hospice,
  maintenance,
  nhrespite,
  nursing,
  rehab,
)
```

```{r}
#| echo: false
#| eval: false
write_rds(cc_data, "data/rds/carecentre/refined/cc_data.rds")
```

```{r}
#| echo: false
#| eval: false
cc_data = read_rds("data/rds/carecentre/refined/cc_data.rds")
```

### USE THIS

If yes is 1, no returns 0.

```{r}

pivoted_cc_data <- cc_data %>%
  select(-address) %>%

  mutate(present = 1) %>%  # Create a column to indicate presence (1)

  pivot_wider(

    names_from = label,    # Pivot based on the 'label' column

    values_from = present,
    values_fill = list(0)# Use the 'present' column for the values
    
  )
```

```{r}
#| echo: false
#| eval: false
write_rds(pivoted_cc_data, "data/rds/carecentre/refined/pivoted_cc_data.rds")
```

```{r}
#| echo: false
#| eval: false
pivoted_cc_data = read_rds("data/rds/carecentre/refined/pivoted_cc_data.rds")
```

Grouping by postal_code: The group_by(postal_code) function groups the dataset by the postal_code column. This ensures that all rows with the same postal_code are treated as a single group for further operations.

Retaining name and address: The summarise() function is used to retain the name and address columns. For each group (i.e., rows with the same postal_code), the first(name) and first(address) functions are used to keep the first occurrence of these columns. This ensures that the name and address values are preserved in the final output.

Summarizing Label Columns:The across(aac:rehab, \~ ifelse(any(. == "yes"), "yes", "no")) part iterates over each label column (from aac to rehab). For each group, it checks if any row within the group has a "yes" for that label. If at least one "yes" is found, the combined row will have "yes" in that column; otherwise, it will have "no".

Output:The result is a new dataset (cc_data_combined) where rows with the same postal_code are combined into a single row. The name and address columns are retained, and the label columns are summarized to reflect whether any row in the group had a "yes".

```{r}
cc_data_t <- cc_data_t %>%
  group_by(postal_code) %>%
  summarise(
    name = first(name),  # Retain the first occurrence of 'name'
    address = first(address),  # Retain the first occurrence of 'address'
    across(aac:rehab, ~ ifelse(any(. == "yes"), "yes", "no"))
  )
```

```{r}
#| echo: false
#| eval: false
write_rds(cc_data_t, "data/rds/carecentre/refined/cc_data_t.rds")
```

```{r}
#| echo: false
#| eval: false
cc_data_t = read_rds("data/rds/carecentre/refined/cc_data_t.rds")
```

### Adding coordinates to care centre

```{r}
add_list <- sort(unique(pivoted_cc_data$postal_code)) #parse a list as API cannot read df
#unique reduces records to pass to portal
#sort is used to easier to find geo codes
```

```{r}
get_coords <- function(add_list){

  # Create a data frame to store all retrieved coordinates
  postal_coords <- data.frame()
    
  for (i in add_list){
    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',
           query=list(searchVal=i,
                     returnGeom='Y',
                     getAddrDetails='Y'))
    data <- fromJSON(rawToChar(r$content))
    found <- data$found
    res <- data$results
    
    # Create a new data frame for each address
    new_row <- data.frame()
    
    # If single result, append 
    if (found == 1){
      postal <- res$POSTAL 
      lat <- res$LATITUDE
      lng <- res$LONGITUDE
      new_row <- data.frame(address = i, 
                           postal = postal, 
                           latitude_wgs84 = lat,  # renamed to clarify coordinate system
                           longitude_wgs84 = lng) # renamed to clarify coordinate system
    }
    
    # If multiple results, drop NIL and append top 1
    else if (found > 1){
      # Remove those with NIL as postal
      res_sub <- res[res$POSTAL != "NIL", ]
      
      # Set as NA first if no Postal
      if (nrow(res_sub) == 0) {
          new_row <- data.frame(address = i, 
                               postal = NA, 
                               latitude_wgs84 = NA, 
                               longitude_wgs84 = NA)
      }
      else{
        top1 <- head(res_sub, n = 1)
        postal <- top1$POSTAL 
        lat <- top1$LATITUDE
        lng <- top1$LONGITUDE
        new_row <- data.frame(address = i, 
                             postal = postal, 
                             latitude_wgs84 = lat, 
                             longitude_wgs84 = lng)
      }
    }
    else {
      new_row <- data.frame(address = i, 
                           postal = NA, 
                           latitude_wgs84 = NA, 
                           longitude_wgs84 = NA)
    }
    
    # Add the row
    postal_coords <- rbind(postal_coords, new_row)
  }
  
  # Convert to sf object with WGS84 coordinates (EPSG:4326)
  # Filter out rows with NA coordinates first
  valid_coords <- postal_coords[!is.na(postal_coords$latitude_wgs84) & 
                              !is.na(postal_coords$longitude_wgs84), ]
  
  if(nrow(valid_coords) > 0) {
    coords_sf <- st_as_sf(valid_coords, 
                         coords = c("longitude_wgs84", "latitude_wgs84"),
                         crs = 4326)
    
    # Transform to SVY21 (EPSG:3414)
    coords_svy21 <- st_transform(coords_sf, 3414)
    
    # Extract coordinates
    coords_matrix <- st_coordinates(coords_svy21)
    
    # Add SVY21 coordinates back to the original dataframe with desired column names
    valid_coords$longitude <- coords_matrix[, 1]  # SVY21 X coordinate as longitude
    valid_coords$latitude <- coords_matrix[, 2]   # SVY21 Y coordinate as latitude
    
    # Merge back with rows that had NA coordinates
    result <- merge(postal_coords, valid_coords[c("address", "longitude", "latitude")], 
                   by = "address", all.x = TRUE)
  } else {
    # If no valid coordinates, add empty SVY21 columns
    result <- postal_coords
    result$longitude <- NA  # SVY21 coordinates
    result$latitude <- NA   # SVY21 coordinates
  }
  
  return(result)
}
```

```{r}
coords <- get_coords(add_list)
```

The longtitude and latitude is then combined into geometry and the crs has been set to EPSG = 3414.

```{r}
coords_sf <- coords %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 3414, remove = FALSE) %>%
  select(address, postal, longitude, latitude, latitude_wgs84, longitude_wgs84)
```

### try this

```{r}
cc_data_final <- cc_data_t %>%
  left_join(coords_sf, 
            join_by(postal_code = postal)
)
```

## Population Data

### Importing Data

[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2024.ashx)

```{r}
popdata24 <- read_csv("data/popdata/respopagesex2024.csv")
```

[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2023](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2023.ashx)

```{r}
popdata23 <- read_csv("data/popdata/respopagesex2023.csv")
```

[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2022](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2022.ashx) 

```{r}
popdata22 <- read_csv("data/popdata/respopagesex2022.csv")
```

::: callout-warning
## PARSING ERROR\*

```         
Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)Rows: 60424 Columns: 6── Column specification
```
:::

[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2021](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2021.ashx)

```{r}
popdata21 <- read_csv("data/popdata/respopagesex2021.csv")
```

[Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2011-2020](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesex2011to2020.ashx)

```{r}
popdata20 <- read_csv("data/popdata/respopagesex2011to2020.csv")
```

```{r}
#| echo: false
#| eval: false
write_rds(popdata24, "data/rds/popdata/original/popdata24.rds")
write_rds(popdata23, "data/rds/popdata/original/popdata23.rds")
write_rds(popdata22, "data/rds/popdata/original/popdata22.rds")
write_rds(popdata21, "data/rds/popdata/original/popdata21.rds")
write_rds(popdata20, "data/rds/popdata/original/popdata20.rds")
```

```{r}
#| echo: false
#| eval: false
popdata24 = read_rds("data/rds/popdata/original/popdata24.rds")
popdata23 = read_rds("data/rds/popdata/original/popdata23.rds")
popdata22 = read_rds("data/rds/popdata/original/popdata22.rds")
popdata21 = read_rds("data/rds/popdata/original/popdata21.rds")
popdata20 = read_rds("data/rds/popdata/original/popdata20.rds")
```

```{r}
glimpse(popdata20)
```

```{r}
popdata24 <- popdata24 %>%
  mutate(Age = ifelse(Age=="90_and_over", "90", Age), 
         Age = parse_number(Age))
```

```{r}
popdata23 <- popdata23 %>%
  mutate(Age = ifelse(Age=="90_and_over", "90", Age), 
         Age = parse_number(Age))
```

```{r}
popdata22 <- popdata22 %>%
  mutate(Age = ifelse(Age=="90_and_over", "90", Age), 
         Age = parse_number(Age))
```

```{r}
popdata21 <- popdata21 %>%
  mutate(Age = ifelse(Age=="90_and_over", "90", Age), 
         Age = parse_number(Age))
```

```{r}
popdata20 <- popdata20 %>%
  mutate(Age = ifelse(Age=="90_and_over", "90", Age), 
         Age = parse_number(Age))
```

### Changing Columns to lowercase

**`names(popdata20)`**: This part of the code retrieves the current column names of the dataset `popdata20`. The `names()` function in R is used to get or set the names of an object, such as the column names of a data frame.

**`tolower(names(popdata20))`**: The `tolower()` function is applied to the column names retrieved in the previous step. This function converts all characters in the names to lowercase. For example, if a column name is `"PA"`, it will become `"pa"`.

**`names(popdata20) <- ...`**: This part assigns the new lowercase column names back to the dataset `popdata20`. The `<-` operator is used to update the column names of the dataset with the lowercase versions.

```{r}
# Assuming your dataset is already loaded as popdata20
names(popdata20) <- tolower(names(popdata20))
names(popdata21) <- tolower(names(popdata21))
names(popdata22) <- tolower(names(popdata22))
names(popdata23) <- tolower(names(popdata23))
names(popdata24) <- tolower(names(popdata24))
```

### Checking for Missing Values

To check for missing or null values in the name and address columns of each dataset, the code uses the summarise() function from the dplyr package. The summarise() function computes summary statistics for the specified columns, which in this case are name and address. The across() function is used to apply the sum(is.na(.)) operation to both columns simultaneously, counting the number of missing (NA) values in each column.

The is.na() function checks whether each value in the name and address columns is missing or null, returning TRUE for missing values and FALSE for non-missing values. The sum() function then counts the number of TRUE values, which corresponds to the number of missing values in each column. This process is applied to each dataset (aac, counselling, daycare, dementia, hospice, maintenance, nhrespite, nursing, and rehab). In conclusion it is able to identify the number of missing values in the name and address columns across all datasets, which helps assess the completeness of the data and highlights any issues that may require cleaning or imputation before further analysis. It returns 0 missing values.

Results: We noticed that there are 30 missing values popdata22 specifically under the column pop.

```{r}
popdata20_missing <- popdata20 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata20_missing)

popdata21_missing <- popdata21 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata21_missing)

popdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata22_missing)

popdata23_missing <- popdata23 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata23_missing)

popdata24_missing <- popdata24 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata24_missing)


```

### Issue with POPDATA22

Using the below code, we are able to see clearly the rows that are affected and in the pop column, it appears as NA. The csv file (respopagesex2022.csv) was opened using excel and each row returned in the below output was then cross checked in excel. There were numbers with comma appeared in excel. This may be because read_csv() function expects a numeric value (double) in one of the columns, but instead, it found a string (the values in the column are likely formatted with commas, such as "1,020"). This is why the parser is raising an issue earlier on.

```{r}
na_rows <- popdata22[is.na(popdata22$pop), ]
print(na_rows)
```

Using problems(), it shows details about any rows or columns that caused problems during the import. The results are a reaffirmation of the explanation above.

```{r}
problems(popdata22)
```

Referencing from [Stackoverflow](https://stackoverflow.com/questions/1523126/how-to-read-data-when-some-numbers-contain-commas-as-thousand-separator), the first line of the code is necessary as it defines a new class called `"num.with.commas"`. This class is intended to handle numeric values that are stored as strings with commas (e.g., `"1,000"`). Thereafter, the second line of the code defines a method to convert a `character` type to the custom `"num.with.commas"` class.

-   The `gsub(",", "", from)` function removes commas from the string (e.g., `"1,000"` becomes `"1000"`)

-   The `as.numeric()` function then converts the cleaned string into a numeric value (e.g., `"1000"` becomes `1000`)

This ensures that numbers with commas are properly converted to numeric values during data import.

```{r}
setClass("num.with.commas")
setAs("character", "num.with.commas", 
        function(from) as.numeric(gsub(",", "", from) ) )
```

The file is then re-imported again and column types were specified.

```{r}
# Read the CSV file and specify column types
popdata22 <- read_csv("data/popdata/respopagesex2022.csv", 
                      col_types = cols(
                        PA = col_character(),
                        SZ = col_character(),
                        Age = col_character(),
                        Sex = col_character(),
                        Pop = col_character(),
                        Time = col_integer()  # Adjust if necessary
                      ))
```

```{r}
problems(popdata22)
```

```{r}
names(popdata22) <- tolower(names(popdata22))
popdata22_missing <- popdata22 %>% summarise(across(c(pa,sz,age,sex,pop,time), ~sum(is.na(.))))
print(popdata22_missing)
```

### Duplicate Check

The code provided checks for duplicate rows in each dataset by grouping the dataset by all columns using group_by_all(). It then filters out the rows that have duplicate combinations of values across all columns using filter(n() \> 1). The n() function counts the number of occurrences for each combination of values, and filter(n() \> 1) keeps only the rows that appear more than once (i.e., duplicates).

For each dataset, the nrow() function is used to check if there are any rows returned after filtering for duplicates. If there are duplicates (i.e., the number of rows is greater than zero), the dataset with the duplicate rows is returned. However, if no duplicates are found (i.e., nrow() equals zero), the code returns 0 to indicate that there are no duplicates in that dataset.

Thus, the code either returns the rows with duplicate values or 0 if no duplicates are present, providing an indication of whether duplicate entries exist in each dataset.

```{r}
# Check for duplicates in 'aac'
popdata20_duplicate <- popdata20 %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()
show(popdata20_duplicate)


# Check for duplicates in 'counselling'
popdata21_duplicate <- popdata21 %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()
show(popdata21_duplicate)

# Check for duplicates in 'daycare'
popdata22_duplicate <- popdata22 %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()
show(popdata22_duplicate)

# Check for duplicates in 'dementia'
popdata23_duplicate <- popdata23 %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()
show(popdata23_duplicate)

# Check for duplicates in 'hospice'
popdata24_duplicate <- popdata24 %>% 
  group_by_all() %>% 
  filter(n() > 1) %>% 
  ungroup()
show(popdata24_duplicate)

```

```{r}
#| echo: false
#| eval: false
write_rds(popdata24, "data/rds/popdata/refined/popdata24cleaned.rds")
write_rds(popdata23, "data/rds/popdata/refined/popdata23cleaned.rds")
write_rds(popdata22, "data/rds/popdata/refined/popdata22cleaned.rds")
write_rds(popdata21, "data/rds/popdata/refined/popdata21cleaned.rds")
write_rds(popdata20, "data/rds/popdata/refined/popdata20cleaned.rds")
```

```{r}
#| echo: false
#| eval: false
popdata24 = read_rds("data/rds/popdata/refined/popdata24cleaned.rds")
popdata23 = read_rds("data/rds/popdata/refined/popdata23cleaned.rds")
popdata22 = read_rds("data/rds/popdata/refined/popdata22cleaned.rds")
popdata21 = read_rds("data/rds/popdata/refined/popdata21cleaned.rds")
popdata20 = read_rds("data/rds/popdata/refined/popdata20cleaned.rds")
```

## Changing 90_and_over to 90

## Calculating Population for Each Age Level

```{r}
popdata24 <- popdata24 %>%
  filter(age >= 65) %>% # Filter for age >= 65
  group_by(age) %>%      # Group by age
  summarise(total_pop = sum(pop)) # Summarize the total population for each age group

# View the resulting dataset
print(popdata24)
```

## Combining Datasets

```{r}
# Combine popdata23 and popdata24 row-wise
combined_data <- bind_rows(popdata23, popdata24)

# View the combined dataset
head(combined_data)
```

# Exploratory Data Analysis

```{r}
tmap_mode("view")
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(CHAS) +
  tm_dots()
```

# References

Tan, K. (2023). Take-home Exercise 1: Geospatial Analytics for Public Good. Retrieved from <https://isss624-kytjy.netlify.app/take-home_ex/take-home_ex1/the1#background>

Urban Redevelopment Authority. (2023). Master Plan 2019 Planning Area Boundary (No Sea) (2024) \[Dataset\]. data.gov.sg. Retrieved February 23, 2025 from https://data.gov.sg/datasets/d_6c6d7361dd826d97b91bac914ca6b2ac/view
